// Generated by psc-bundle 0.11.4
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show line 13, column 3 - line 14, column 3: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showChar"] = showChar;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["join"] = join;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $33 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($33) {
                  return Data_Semiring.one(dictRing.Semiring0());
              };
              return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $42 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($42) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["abs"] = abs;
  exports["compare"] = compare;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["signum"] = signum;
  exports["ordInt"] = ordInt;
  exports["ordChar"] = ordChar;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  exports.intDiv = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      return x % y;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];        
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function (__copy_dictEq) {
      return function (__copy_dictEuclideanRing) {
          return function (__copy_a) {
              return function (__copy_b) {
                  var __tco_dictEq = __copy_dictEq;
                  var __tco_dictEuclideanRing = __copy_dictEuclideanRing;
                  var __tco_a = __copy_a;
                  var __tco_done = false;
                  var __tco_result;
                  function __tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($7) {
                          __tco_done = true;
                          return a;
                      };
                      __tco_dictEq = dictEq;
                      __tco_dictEuclideanRing = dictEuclideanRing;
                      __tco_a = b;
                      __copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!__tco_done) {
                      __tco_result = __tco_loop(__tco_dictEq, __tco_dictEuclideanRing, __tco_a, __copy_b);
                  };
                  return __tco_result;
              };
          };
      };
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["gcd"] = gcd;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 220, column 1 - line 220, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 69, column 3 - line 69, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 128, column 3 - line 128, column 24: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeConj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Conj);
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["newtypeConj"] = newtypeConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["all"] = all;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["intercalate"] = intercalate;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 37, column 3 - line 37, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 230, column 1 - line 230, column 26: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 44, column 3 - line 44, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 80, column 3 - line 80, column 28: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRec = function (f) {
      var go = function (__copy_v) {
          var __tco_done = false;
          var __tco_result;
          function __tco_loop(v) {
              if (v instanceof Loop) {
                  __copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  __tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 94, column 13 - line 97, column 18: " + [ v.constructor.name ]);
          };
          while (!__tco_done) {
              __tco_result = __tco_loop(__copy_v);
          };
          return __tco_result;
      };
      return function ($53) {
          return go(f($53));
      };
  }; 
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Done(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                  return new Done(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 112, column 7 - line 112, column 33: " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 33, column 3 - line 33, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRec"] = tailRec;
  exports["tailRecM"] = tailRecM;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecEither"] = monadRecEither;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Maybe = PS["Data.Maybe"];
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Product"] = Product;
  exports["Generic"] = Generic;
  exports["from"] = from;
  exports["to"] = to;
})(PS["Data.Generic.Rep"] = PS["Data.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Prelude = PS["Prelude"];        
  var GenericEq = function (genericEq$prime) {
      this["genericEq'"] = genericEq$prime;
  }; 
  var genericEqField = function (dictEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var genericEq$prime = function (dict) {
      return dict["genericEq'"];
  };
  var genericEqConstructor = function (dictGenericEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return genericEq$prime(dictGenericEq)(v)(v1);
          };
      });
  };
  var genericEqProduct = function (dictGenericEq) {
      return function (dictGenericEq1) {
          return new GenericEq(function (v) {
              return function (v1) {
                  return genericEq$prime(dictGenericEq)(v.value0)(v1.value0) && genericEq$prime(dictGenericEq1)(v.value1)(v1.value1);
              };
          });
      };
  };
  var genericEqRec = function (dictGenericEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return genericEq$prime(dictGenericEq)(v)(v1);
          };
      });
  };
  var genericEq = function (dictGeneric) {
      return function (dictGenericEq) {
          return function (x) {
              return function (y) {
                  return genericEq$prime(dictGenericEq)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y));
              };
          };
      };
  };
  exports["GenericEq"] = GenericEq;
  exports["genericEq"] = genericEq;
  exports["genericEqProduct"] = genericEqProduct;
  exports["genericEqConstructor"] = genericEqConstructor;
  exports["genericEqRec"] = genericEqRec;
  exports["genericEqField"] = genericEqField;
})(PS["Data.Generic.Rep.Eq"] = PS["Data.Generic.Rep.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($143) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($143));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var __tco_b = __copy_b;
              var __tco_done = false;
              var __tco_result;
              function __tco_loop(b, v) {
                  if (v instanceof Nil) {
                      __tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      __tco_b = f(b)(v.value0);
                      __copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 78, column 12 - line 80, column 30: " + [ v.constructor.name ]);
              };
              while (!__tco_done) {
                  __tco_result = __tco_loop(__tco_b, __copy_v);
              };
              return __tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = function (__copy_acc) {
              return function (__copy_v) {
                  var __tco_acc = __copy_acc;
                  var __tco_done = false;
                  var __tco_result;
                  function __tco_loop(acc, v) {
                      if (v instanceof Nil) {
                          __tco_done = true;
                          return acc;
                      };
                      if (v instanceof Cons) {
                          __tco_acc = new Cons(v.value0, acc);
                          __copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 73, column 15 - line 75, column 33: " + [ v.constructor.name ]);
                  };
                  while (!__tco_done) {
                      __tco_result = __tco_loop(__tco_acc, __copy_v);
                  };
                  return __tco_result;
              };
          };
          return function ($144) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)($144));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });                                                                  
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 95, column 3 - line 95, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var __tco_acc = __copy_acc;
              var __tco_done = false;
              var __tco_result;
              function __tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      __tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                      __copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 365, column 11 - line 368, column 36: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!__tco_done) {
                  __tco_result = __tco_loop(__tco_acc, __copy_v);
              };
              return __tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var manyRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (p) {
              var go = function (acc) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (v) {
                      return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v1) {
                          return new Data_List_Types.Cons(v1, acc);
                      })(function (v1) {
                          return reverse(acc);
                      })(v));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var index = function (__copy_v) {
      return function (__copy_v1) {
          var __tco_v = __copy_v;
          var __tco_done = false;
          var __tco_result;
          function __tco_loop(v, v1) {
              if (v instanceof Data_List_Types.Nil) {
                  __tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_List_Types.Cons && v1 === 0) {
                  __tco_done = true;
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Data_List_Types.Cons) {
                  __tco_v = v.value1;
                  __copy_v1 = v1 - 1 | 0;
                  return;
              };
              throw new Error("Failed pattern match at Data.List line 281, column 1 - line 281, column 22: " + [ v.constructor.name, v1.constructor.name ]);
          };
          while (!__tco_done) {
              __tco_result = __tco_loop(__tco_v, __copy_v1);
          };
          return __tco_result;
      };
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 230, column 1 - line 230, column 19: " + [ v.constructor.name ]);
  };
  var findIndex = function (fn) {
      var go = function (__copy_v) {
          return function (__copy_v1) {
              var __tco_v = __copy_v;
              var __tco_done = false;
              var __tco_result;
              function __tco_loop(v, v1) {
                  if (v1 instanceof Data_List_Types.Cons) {
                      if (fn(v1.value0)) {
                          __tco_done = true;
                          return new Data_Maybe.Just(v);
                      };
                      if (Data_Boolean.otherwise) {
                          __tco_v = v + 1 | 0;
                          __copy_v1 = v1.value1;
                          return;
                      };
                  };
                  if (v1 instanceof Data_List_Types.Nil) {
                      __tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List line 301, column 3 - line 302, column 44: " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!__tco_done) {
                  __tco_result = __tco_loop(__tco_v, __copy_v1);
              };
              return __tco_result;
          };
      };
      return go(0);
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  exports["elemIndex"] = elemIndex;
  exports["findIndex"] = findIndex;
  exports["head"] = head;
  exports["index"] = index;
  exports["length"] = length;
  exports["manyRec"] = manyRec;
  exports["null"] = $$null;
  exports["reverse"] = reverse;
  exports["singleton"] = singleton;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.pow = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return Math.pow(x,y) | 0;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Math"];
  exports["round"] = $foreign.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 65, column 1 - line 70, column 43: " + [ x.constructor.name ]);
  };
  var round = function ($13) {
      return unsafeClamp($$Math.round($13));
  };
  exports["fromNumber"] = fromNumber;
  exports["fromString"] = fromString;
  exports["fromStringAs"] = fromStringAs;
  exports["round"] = round;
  exports["pow"] = $foreign.pow;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Ratio = (function () {
      function Ratio(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ratio.create = function (value0) {
          return function (value1) {
              return new Ratio(value0, value1);
          };
      };
      return Ratio;
  })();
  var reduce = function (dictOrd) {
      return function (dictEuclideanRing) {
          return function (n) {
              return function (d) {
                  var g = Data_EuclideanRing.gcd(dictOrd.Eq0())(dictEuclideanRing)(n)(d);
                  var d$prime = Data_EuclideanRing.div(dictEuclideanRing)(d)(g);
                  return new Ratio(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(Data_EuclideanRing.div(dictEuclideanRing)(n)(g))(Data_Ord.signum(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime)), Data_Ord.abs(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime));
              };
          };
      };
  };
  var semiringRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return new Data_Semiring.Semiring(function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Semiring.add(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value1))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value0)))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value0))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
              };
          }, new Ratio(Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()), Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())), new Ratio(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()), Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())));
      };
  };
  var ringRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return new Data_Ring.Ring(function () {
              return semiringRatio(dictOrd)(dictEuclideanRing);
          }, function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Ring.sub((dictEuclideanRing.CommutativeRing0()).Ring0())(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value1))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value0)))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
              };
          });
      };
  };
  var numerator = function (v) {
      return v.value0;
  };
  var denominator = function (v) {
      return v.value1;
  };
  exports["denominator"] = denominator;
  exports["numerator"] = numerator;
  exports["reduce"] = reduce;
  exports["semiringRatio"] = semiringRatio;
  exports["ringRatio"] = ringRatio;
})(PS["Data.Ratio"] = PS["Data.Ratio"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Prelude = PS["Prelude"];        
  var toNumber = function (x) {
      return Data_Int.toNumber(Data_Ratio.numerator(x)) / Data_Int.toNumber(Data_Ratio.denominator(x));
  };
  var fromInt = function (i) {
      return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(i)(1);
  };
  exports["fromInt"] = fromInt;
  exports["toNumber"] = toNumber;
})(PS["Data.Rational"] = PS["Data.Rational"] || {});
(function(exports) {
    "use strict";

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.singleton = function (c) {
    return c;
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_indexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = indexOf(v)(str);
          if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
              return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                      
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["charAt"] = charAt;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["stripPrefix"] = stripPrefix;
  exports["drop"] = $foreign.drop;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["length"] = $foreign.length;
  exports["singleton"] = $foreign.singleton;
  exports["take"] = $foreign.take;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = PS["Data.Generic.Rep.Eq"];
  var Data_Generic_Rep_Ord = PS["Data.Generic.Rep.Ord"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var Thin = (function () {
      function Thin() {

      };
      Thin.value = new Thin();
      return Thin;
  })();
  var ThinThin = (function () {
      function ThinThin() {

      };
      ThinThin.value = new ThinThin();
      return ThinThin;
  })();
  var ThinThick = (function () {
      function ThinThick() {

      };
      ThinThick.value = new ThinThick();
      return ThinThick;
  })();
  var ThickThin = (function () {
      function ThickThin() {

      };
      ThickThin.value = new ThickThin();
      return ThickThin;
  })();
  var Begin = (function () {
      function Begin() {

      };
      Begin.value = new Begin();
      return Begin;
  })();
  var End = (function () {
      function End() {

      };
      End.value = new End();
      return End;
  })();
  var BeginAndEnd = (function () {
      function BeginAndEnd() {

      };
      BeginAndEnd.value = new BeginAndEnd();
      return BeginAndEnd;
  })();
  var A = (function () {
      function A() {

      };
      A.value = new A();
      return A;
  })();
  var B = (function () {
      function B() {

      };
      B.value = new B();
      return B;
  })();
  var C = (function () {
      function C() {

      };
      C.value = new C();
      return C;
  })();
  var D = (function () {
      function D() {

      };
      D.value = new D();
      return D;
  })();
  var E = (function () {
      function E() {

      };
      E.value = new E();
      return E;
  })();
  var F = (function () {
      function F() {

      };
      F.value = new F();
      return F;
  })();
  var G = (function () {
      function G() {

      };
      G.value = new G();
      return G;
  })();
  var Major = (function () {
      function Major() {

      };
      Major.value = new Major();
      return Major;
  })();
  var Minor = (function () {
      function Minor() {

      };
      Minor.value = new Minor();
      return Minor;
  })();
  var Ionian = (function () {
      function Ionian() {

      };
      Ionian.value = new Ionian();
      return Ionian;
  })();
  var Dorian = (function () {
      function Dorian() {

      };
      Dorian.value = new Dorian();
      return Dorian;
  })();
  var Phrygian = (function () {
      function Phrygian() {

      };
      Phrygian.value = new Phrygian();
      return Phrygian;
  })();
  var Lydian = (function () {
      function Lydian() {

      };
      Lydian.value = new Lydian();
      return Lydian;
  })();
  var Mixolydian = (function () {
      function Mixolydian() {

      };
      Mixolydian.value = new Mixolydian();
      return Mixolydian;
  })();
  var Aeolian = (function () {
      function Aeolian() {

      };
      Aeolian.value = new Aeolian();
      return Aeolian;
  })();
  var Locrian = (function () {
      function Locrian() {

      };
      Locrian.value = new Locrian();
      return Locrian;
  })();
  var LeftArrow = (function () {
      function LeftArrow(value0) {
          this.value0 = value0;
      };
      LeftArrow.create = function (value0) {
          return new LeftArrow(value0);
      };
      return LeftArrow;
  })();
  var RightArrow = (function () {
      function RightArrow(value0) {
          this.value0 = value0;
      };
      RightArrow.create = function (value0) {
          return new RightArrow(value0);
      };
      return RightArrow;
  })();
  var AboveNextSymbol = (function () {
      function AboveNextSymbol() {

      };
      AboveNextSymbol.value = new AboveNextSymbol();
      return AboveNextSymbol;
  })();
  var BelowNextSymbol = (function () {
      function BelowNextSymbol() {

      };
      BelowNextSymbol.value = new BelowNextSymbol();
      return BelowNextSymbol;
  })();
  var LeftOfNextSymbol = (function () {
      function LeftOfNextSymbol() {

      };
      LeftOfNextSymbol.value = new LeftOfNextSymbol();
      return LeftOfNextSymbol;
  })();
  var RightOfNextSymbol = (function () {
      function RightOfNextSymbol() {

      };
      RightOfNextSymbol.value = new RightOfNextSymbol();
      return RightOfNextSymbol;
  })();
  var Discretional = (function () {
      function Discretional() {

      };
      Discretional.value = new Discretional();
      return Discretional;
  })();
  var Sharp = (function () {
      function Sharp() {

      };
      Sharp.value = new Sharp();
      return Sharp;
  })();
  var Flat = (function () {
      function Flat() {

      };
      Flat.value = new Flat();
      return Flat;
  })();
  var DoubleSharp = (function () {
      function DoubleSharp() {

      };
      DoubleSharp.value = new DoubleSharp();
      return DoubleSharp;
  })();
  var DoubleFlat = (function () {
      function DoubleFlat() {

      };
      DoubleFlat.value = new DoubleFlat();
      return DoubleFlat;
  })();
  var Natural = (function () {
      function Natural() {

      };
      Natural.value = new Natural();
      return Natural;
  })();
  var KeyAccidental = (function () {
      function KeyAccidental(value0) {
          this.value0 = value0;
      };
      KeyAccidental.create = function (value0) {
          return new KeyAccidental(value0);
      };
      return KeyAccidental;
  })();
  var Area = (function () {
      function Area(value0) {
          this.value0 = value0;
      };
      Area.create = function (value0) {
          return new Area(value0);
      };
      return Area;
  })();
  var Book = (function () {
      function Book(value0) {
          this.value0 = value0;
      };
      Book.create = function (value0) {
          return new Book(value0);
      };
      return Book;
  })();
  var Composer = (function () {
      function Composer(value0) {
          this.value0 = value0;
      };
      Composer.create = function (value0) {
          return new Composer(value0);
      };
      return Composer;
  })();
  var Discography = (function () {
      function Discography(value0) {
          this.value0 = value0;
      };
      Discography.create = function (value0) {
          return new Discography(value0);
      };
      return Discography;
  })();
  var FileUrl = (function () {
      function FileUrl(value0) {
          this.value0 = value0;
      };
      FileUrl.create = function (value0) {
          return new FileUrl(value0);
      };
      return FileUrl;
  })();
  var Group = (function () {
      function Group(value0) {
          this.value0 = value0;
      };
      Group.create = function (value0) {
          return new Group(value0);
      };
      return Group;
  })();
  var History = (function () {
      function History(value0) {
          this.value0 = value0;
      };
      History.create = function (value0) {
          return new History(value0);
      };
      return History;
  })();
  var Instruction = (function () {
      function Instruction(value0) {
          this.value0 = value0;
      };
      Instruction.create = function (value0) {
          return new Instruction(value0);
      };
      return Instruction;
  })();
  var Key = (function () {
      function Key(value0) {
          this.value0 = value0;
      };
      Key.create = function (value0) {
          return new Key(value0);
      };
      return Key;
  })();
  var UnitNoteLength = (function () {
      function UnitNoteLength(value0) {
          this.value0 = value0;
      };
      UnitNoteLength.create = function (value0) {
          return new UnitNoteLength(value0);
      };
      return UnitNoteLength;
  })();
  var Meter = (function () {
      function Meter(value0) {
          this.value0 = value0;
      };
      Meter.create = function (value0) {
          return new Meter(value0);
      };
      return Meter;
  })();
  var Macro = (function () {
      function Macro(value0) {
          this.value0 = value0;
      };
      Macro.create = function (value0) {
          return new Macro(value0);
      };
      return Macro;
  })();
  var Notes = (function () {
      function Notes(value0) {
          this.value0 = value0;
      };
      Notes.create = function (value0) {
          return new Notes(value0);
      };
      return Notes;
  })();
  var Origin = (function () {
      function Origin(value0) {
          this.value0 = value0;
      };
      Origin.create = function (value0) {
          return new Origin(value0);
      };
      return Origin;
  })();
  var Parts = (function () {
      function Parts(value0) {
          this.value0 = value0;
      };
      Parts.create = function (value0) {
          return new Parts(value0);
      };
      return Parts;
  })();
  var Tempo = (function () {
      function Tempo(value0) {
          this.value0 = value0;
      };
      Tempo.create = function (value0) {
          return new Tempo(value0);
      };
      return Tempo;
  })();
  var Rhythm = (function () {
      function Rhythm(value0) {
          this.value0 = value0;
      };
      Rhythm.create = function (value0) {
          return new Rhythm(value0);
      };
      return Rhythm;
  })();
  var Remark = (function () {
      function Remark(value0) {
          this.value0 = value0;
      };
      Remark.create = function (value0) {
          return new Remark(value0);
      };
      return Remark;
  })();
  var Source = (function () {
      function Source(value0) {
          this.value0 = value0;
      };
      Source.create = function (value0) {
          return new Source(value0);
      };
      return Source;
  })();
  var SymbolLine = (function () {
      function SymbolLine(value0) {
          this.value0 = value0;
      };
      SymbolLine.create = function (value0) {
          return new SymbolLine(value0);
      };
      return SymbolLine;
  })();
  var Title = (function () {
      function Title(value0) {
          this.value0 = value0;
      };
      Title.create = function (value0) {
          return new Title(value0);
      };
      return Title;
  })();
  var UserDefined = (function () {
      function UserDefined(value0) {
          this.value0 = value0;
      };
      UserDefined.create = function (value0) {
          return new UserDefined(value0);
      };
      return UserDefined;
  })();
  var Voice = (function () {
      function Voice(value0) {
          this.value0 = value0;
      };
      Voice.create = function (value0) {
          return new Voice(value0);
      };
      return Voice;
  })();
  var WordsAfter = (function () {
      function WordsAfter(value0) {
          this.value0 = value0;
      };
      WordsAfter.create = function (value0) {
          return new WordsAfter(value0);
      };
      return WordsAfter;
  })();
  var WordsAligned = (function () {
      function WordsAligned(value0) {
          this.value0 = value0;
      };
      WordsAligned.create = function (value0) {
          return new WordsAligned(value0);
      };
      return WordsAligned;
  })();
  var ReferenceNumber = (function () {
      function ReferenceNumber(value0) {
          this.value0 = value0;
      };
      ReferenceNumber.create = function (value0) {
          return new ReferenceNumber(value0);
      };
      return ReferenceNumber;
  })();
  var Transcription = (function () {
      function Transcription(value0) {
          this.value0 = value0;
      };
      Transcription.create = function (value0) {
          return new Transcription(value0);
      };
      return Transcription;
  })();
  var FieldContinuation = (function () {
      function FieldContinuation(value0) {
          this.value0 = value0;
      };
      FieldContinuation.create = function (value0) {
          return new FieldContinuation(value0);
      };
      return FieldContinuation;
  })();
  var Comment = (function () {
      function Comment(value0) {
          this.value0 = value0;
      };
      Comment.create = function (value0) {
          return new Comment(value0);
      };
      return Comment;
  })();
  var UnsupportedHeader = (function () {
      function UnsupportedHeader() {

      };
      UnsupportedHeader.value = new UnsupportedHeader();
      return UnsupportedHeader;
  })();
  var Barline = (function () {
      function Barline(value0) {
          this.value0 = value0;
      };
      Barline.create = function (value0) {
          return new Barline(value0);
      };
      return Barline;
  })();
  var Note = (function () {
      function Note(value0) {
          this.value0 = value0;
      };
      Note.create = function (value0) {
          return new Note(value0);
      };
      return Note;
  })();
  var BrokenRhythmPair = (function () {
      function BrokenRhythmPair(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BrokenRhythmPair.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BrokenRhythmPair(value0, value1, value2);
              };
          };
      };
      return BrokenRhythmPair;
  })();
  var Rest = (function () {
      function Rest(value0) {
          this.value0 = value0;
      };
      Rest.create = function (value0) {
          return new Rest(value0);
      };
      return Rest;
  })();
  var Tuplet = (function () {
      function Tuplet(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuplet.create = function (value0) {
          return function (value1) {
              return new Tuplet(value0, value1);
          };
      };
      return Tuplet;
  })();
  var Decoration = (function () {
      function Decoration(value0) {
          this.value0 = value0;
      };
      Decoration.create = function (value0) {
          return new Decoration(value0);
      };
      return Decoration;
  })();
  var Slur = (function () {
      function Slur(value0) {
          this.value0 = value0;
      };
      Slur.create = function (value0) {
          return new Slur(value0);
      };
      return Slur;
  })();
  var GraceNote = (function () {
      function GraceNote(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GraceNote.create = function (value0) {
          return function (value1) {
              return new GraceNote(value0, value1);
          };
      };
      return GraceNote;
  })();
  var Annotation = (function () {
      function Annotation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Annotation.create = function (value0) {
          return function (value1) {
              return new Annotation(value0, value1);
          };
      };
      return Annotation;
  })();
  var ChordSymbol = (function () {
      function ChordSymbol(value0) {
          this.value0 = value0;
      };
      ChordSymbol.create = function (value0) {
          return new ChordSymbol(value0);
      };
      return ChordSymbol;
  })();
  var Chord = (function () {
      function Chord(value0) {
          this.value0 = value0;
      };
      Chord.create = function (value0) {
          return new Chord(value0);
      };
      return Chord;
  })();
  var Inline = (function () {
      function Inline(value0) {
          this.value0 = value0;
      };
      Inline.create = function (value0) {
          return new Inline(value0);
      };
      return Inline;
  })();
  var Spacer = (function () {
      function Spacer(value0) {
          this.value0 = value0;
      };
      Spacer.create = function (value0) {
          return new Spacer(value0);
      };
      return Spacer;
  })();
  var Ignore = (function () {
      function Ignore() {

      };
      Ignore.value = new Ignore();
      return Ignore;
  })();
  var Continuation = (function () {
      function Continuation() {

      };
      Continuation.value = new Continuation();
      return Continuation;
  })();
  var Score = (function () {
      function Score(value0) {
          this.value0 = value0;
      };
      Score.create = function (value0) {
          return new Score(value0);
      };
      return Score;
  })();
  var BodyInfo = (function () {
      function BodyInfo(value0) {
          this.value0 = value0;
      };
      BodyInfo.create = function (value0) {
          return new BodyInfo(value0);
      };
      return BodyInfo;
  })();
  var showPitchClass = new Data_Show.Show(function (v) {
      if (v instanceof A) {
          return "A";
      };
      if (v instanceof B) {
          return "B";
      };
      if (v instanceof C) {
          return "C";
      };
      if (v instanceof D) {
          return "D";
      };
      if (v instanceof E) {
          return "E";
      };
      if (v instanceof F) {
          return "F";
      };
      if (v instanceof G) {
          return "G";
      };
      throw new Error("Failed pattern match at Data.Abc line 217, column 3 - line 218, column 3: " + [ v.constructor.name ]);
  });
  var showAccidental = new Data_Show.Show(function (v) {
      if (v instanceof Sharp) {
          return "^";
      };
      if (v instanceof Flat) {
          return "_";
      };
      if (v instanceof DoubleSharp) {
          return "^^";
      };
      if (v instanceof DoubleFlat) {
          return "__";
      };
      if (v instanceof Natural) {
          return "=";
      };
      throw new Error("Failed pattern match at Data.Abc line 196, column 5 - line 197, column 5: " + [ v.constructor.name ]);
  });
  var middlecOctave = 5;
  var genericKeyAccidental = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.value0.accidental, x.value0.pitchClass);
  }, function (x) {
      return new KeyAccidental({
          accidental: x.value0, 
          pitchClass: x.value1
      });
  });
  var eqPitchCLass = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof A && y instanceof A) {
              return true;
          };
          if (x instanceof B && y instanceof B) {
              return true;
          };
          if (x instanceof C && y instanceof C) {
              return true;
          };
          if (x instanceof D && y instanceof D) {
              return true;
          };
          if (x instanceof E && y instanceof E) {
              return true;
          };
          if (x instanceof F && y instanceof F) {
              return true;
          };
          if (x instanceof G && y instanceof G) {
              return true;
          };
          return false;
      };
  });
  var eqAccidental = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Sharp && y instanceof Sharp) {
              return true;
          };
          if (x instanceof Flat && y instanceof Flat) {
              return true;
          };
          if (x instanceof DoubleSharp && y instanceof DoubleSharp) {
              return true;
          };
          if (x instanceof DoubleFlat && y instanceof DoubleFlat) {
              return true;
          };
          if (x instanceof Natural && y instanceof Natural) {
              return true;
          };
          return false;
      };
  });
  var eqKeyAccidental = new Data_Eq.Eq(Data_Generic_Rep_Eq.genericEq(genericKeyAccidental)(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqRec(Data_Generic_Rep_Eq.genericEqProduct(Data_Generic_Rep_Eq.genericEqField(eqAccidental))(Data_Generic_Rep_Eq.genericEqField(eqPitchCLass))))));
  exports["Sharp"] = Sharp;
  exports["Flat"] = Flat;
  exports["DoubleSharp"] = DoubleSharp;
  exports["DoubleFlat"] = DoubleFlat;
  exports["Natural"] = Natural;
  exports["AboveNextSymbol"] = AboveNextSymbol;
  exports["BelowNextSymbol"] = BelowNextSymbol;
  exports["LeftOfNextSymbol"] = LeftOfNextSymbol;
  exports["RightOfNextSymbol"] = RightOfNextSymbol;
  exports["Discretional"] = Discretional;
  exports["Score"] = Score;
  exports["BodyInfo"] = BodyInfo;
  exports["LeftArrow"] = LeftArrow;
  exports["RightArrow"] = RightArrow;
  exports["Area"] = Area;
  exports["Book"] = Book;
  exports["Composer"] = Composer;
  exports["Discography"] = Discography;
  exports["FileUrl"] = FileUrl;
  exports["Group"] = Group;
  exports["History"] = History;
  exports["Instruction"] = Instruction;
  exports["Key"] = Key;
  exports["UnitNoteLength"] = UnitNoteLength;
  exports["Meter"] = Meter;
  exports["Macro"] = Macro;
  exports["Notes"] = Notes;
  exports["Origin"] = Origin;
  exports["Parts"] = Parts;
  exports["Tempo"] = Tempo;
  exports["Rhythm"] = Rhythm;
  exports["Remark"] = Remark;
  exports["Source"] = Source;
  exports["SymbolLine"] = SymbolLine;
  exports["Title"] = Title;
  exports["UserDefined"] = UserDefined;
  exports["Voice"] = Voice;
  exports["WordsAfter"] = WordsAfter;
  exports["WordsAligned"] = WordsAligned;
  exports["ReferenceNumber"] = ReferenceNumber;
  exports["Transcription"] = Transcription;
  exports["FieldContinuation"] = FieldContinuation;
  exports["Comment"] = Comment;
  exports["UnsupportedHeader"] = UnsupportedHeader;
  exports["KeyAccidental"] = KeyAccidental;
  exports["Major"] = Major;
  exports["Minor"] = Minor;
  exports["Ionian"] = Ionian;
  exports["Dorian"] = Dorian;
  exports["Phrygian"] = Phrygian;
  exports["Lydian"] = Lydian;
  exports["Mixolydian"] = Mixolydian;
  exports["Aeolian"] = Aeolian;
  exports["Locrian"] = Locrian;
  exports["Barline"] = Barline;
  exports["Note"] = Note;
  exports["BrokenRhythmPair"] = BrokenRhythmPair;
  exports["Rest"] = Rest;
  exports["Tuplet"] = Tuplet;
  exports["Decoration"] = Decoration;
  exports["Slur"] = Slur;
  exports["GraceNote"] = GraceNote;
  exports["Annotation"] = Annotation;
  exports["ChordSymbol"] = ChordSymbol;
  exports["Chord"] = Chord;
  exports["Inline"] = Inline;
  exports["Spacer"] = Spacer;
  exports["Ignore"] = Ignore;
  exports["Continuation"] = Continuation;
  exports["A"] = A;
  exports["B"] = B;
  exports["C"] = C;
  exports["D"] = D;
  exports["E"] = E;
  exports["F"] = F;
  exports["G"] = G;
  exports["Begin"] = Begin;
  exports["End"] = End;
  exports["BeginAndEnd"] = BeginAndEnd;
  exports["Thin"] = Thin;
  exports["ThinThin"] = ThinThin;
  exports["ThinThick"] = ThinThick;
  exports["ThickThin"] = ThickThin;
  exports["middlecOctave"] = middlecOctave;
  exports["showAccidental"] = showAccidental;
  exports["eqAccidental"] = eqAccidental;
  exports["showPitchClass"] = showPitchClass;
  exports["eqPitchCLass"] = eqPitchCLass;
  exports["genericKeyAccidental"] = genericKeyAccidental;
  exports["eqKeyAccidental"] = eqKeyAccidental;
})(PS["Data.Abc"] = PS["Data.Abc"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var showRatio = function (r) {
      return Data_Show.show(Data_Show.showInt)(Data_Ratio.numerator(r)) + ("/" + Data_Show.show(Data_Show.showInt)(Data_Ratio.denominator(r)));
  };
  var pitch = function (octaveNumber) {
      return function (p) {
          var $15 = octaveNumber <= Data_Abc.middlecOctave;
          if ($15) {
              return Data_Show.show(Data_Abc.showPitchClass)(p);
          };
          return Data_String.toLower(Data_Show.show(Data_Abc.showPitchClass)(p));
      };
  };
  var octave = function (i) {
      var octaveAboveMiddleC = Data_Abc.middlecOctave + 1 | 0;
      var $16 = i === Data_Abc.middlecOctave || i === octaveAboveMiddleC;
      if ($16) {
          return "";
      };
      var $17 = i > octaveAboveMiddleC;
      if ($17) {
          return Data_String.take(i - octaveAboveMiddleC | 0)("''''''''''");
      };
      return Data_String.take(Data_Abc.middlecOctave - i | 0)(",,,,,,,,,,");
  };
  var duration = function (r) {
      var v = new Data_Tuple.Tuple(Data_Ratio.numerator(r), Data_Ratio.denominator(r));
      if (v.value0 === 1 && v.value1 === 1) {
          return "";
      };
      if (v.value0 === 1 && v.value1 === 2) {
          return "/";
      };
      if (v.value1 === 1) {
          return Data_Show.show(Data_Show.showInt)(v.value0);
      };
      return showRatio(r);
  };
  var abcNote = function (a) {
      var tie = (function () {
          if (a.tied) {
              return "-";
          };
          return "";
      })();
      var acc = Data_Maybe.fromMaybe("")(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Show.show(Data_Abc.showAccidental))(a.accidental));
      return acc + (pitch(a.octave)(a.pitchClass) + (octave(a.octave) + (duration(a.duration) + tie)));
  };
  var notes = function (ns) {
      var f = function (a) {
          return function (acc) {
              return abcNote(a) + acc;
          };
      };
      return Data_Foldable.foldr(Data_List_Types.foldableList)(f)("")(ns);
  };
  var abcChord = function (a) {
      return "[" + (notes(a.notes) + ("]" + duration(a.duration)));
  };
  exports["abcChord"] = abcChord;
  exports["abcNote"] = abcNote;
})(PS["Data.Abc.Canonical"] = PS["Data.Abc.Canonical"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function (__copy_v) {
              var __tco_done = false;
              var __tco_result;
              function __tco_loop(v) {
                  if (v instanceof Leaf) {
                      __tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          __tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          __copy_v = v.value0;
                          return;
                      };
                      __copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          __tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          __tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          __copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          __copy_v = v.value6;
                          return;
                      };
                      __copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map line 157, column 12 - line 176, column 29: " + [ v.constructor.name ]);
              };
              while (!__tco_done) {
                  __tco_result = __tco_loop(__copy_v);
              };
              return __tco_result;
          };
          return go;
      };
  }; 
  var fromZipper = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_tree) {
              var __tco_dictOrd = __copy_dictOrd;
              var __tco_v = __copy_v;
              var __tco_done = false;
              var __tco_result;
              function __tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      __tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          __tco_dictOrd = dictOrd;
                          __tco_v = v.value1;
                          __copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          __tco_dictOrd = dictOrd;
                          __tco_v = v.value1;
                          __copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          __tco_dictOrd = dictOrd;
                          __tco_v = v.value1;
                          __copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          __tco_dictOrd = dictOrd;
                          __tco_v = v.value1;
                          __copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          __tco_dictOrd = dictOrd;
                          __tco_v = v.value1;
                          __copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map line 380, column 3 - line 385, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 378, column 1 - line 378, column 27: " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!__tco_done) {
                  __tco_result = __tco_loop(__tco_dictOrd, __tco_v, __copy_tree);
              };
              return __tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function (__copy_v1) {
                  return function (__copy_v2) {
                      var __tco_v1 = __copy_v1;
                      var __tco_done = false;
                      var __tco_result;
                      function __tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              __tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  __tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  __tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  __tco_v1 = v1.value1;
                                  __copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  __tco_v1 = v1.value1;
                                  __copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  __tco_v1 = v1.value1;
                                  __copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map line 416, column 5 - line 421, column 108: " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map line 414, column 3 - line 414, column 58: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!__tco_done) {
                          __tco_result = __tco_loop(__tco_v1, __copy_v2);
                      };
                      return __tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function (__copy_ctx) {
                  return function (__copy_v1) {
                      var __tco_ctx = __copy_ctx;
                      var __tco_done = false;
                      var __tco_result;
                      function __tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              __tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  __tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  __tco_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  __copy_v1 = v1.value0;
                                  return;
                              };
                              __tco_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              __copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  __tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  __tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  __tco_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  __copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  __tco_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  __copy_v1 = v1.value3;
                                  return;
                              };
                              __tco_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              __copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map line 397, column 3 - line 397, column 48: " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!__tco_done) {
                          __tco_result = __tco_loop(__tco_ctx, __copy_v1);
                      };
                      return __tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  exports["empty"] = empty;
  exports["fromFoldable"] = fromFoldable;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_Accidentals = PS["Data.Abc.Accidentals"];
  var Data_Abc_Canonical = PS["Data.Abc.Canonical"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var sharpScale = new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.C.value, 
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.C.value, 
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.D.value, 
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.D.value, 
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.E.value, 
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.F.value, 
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.F.value, 
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.G.value, 
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.G.value, 
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.A.value, 
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.A.value, 
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.B.value, 
      accidental: Data_Abc.Natural.value
  }), Data_List_Types.Nil.value))))))))))));
  var notesInChromaticScale = 12;
  var modalDistance = function (mode) {
      if (mode instanceof Data_Abc.Dorian) {
          return 10;
      };
      if (mode instanceof Data_Abc.Phrygian) {
          return 8;
      };
      if (mode instanceof Data_Abc.Lydian) {
          return 7;
      };
      if (mode instanceof Data_Abc.Mixolydian) {
          return 5;
      };
      if (mode instanceof Data_Abc.Aeolian) {
          return 3;
      };
      if (mode instanceof Data_Abc.Minor) {
          return 3;
      };
      if (mode instanceof Data_Abc.Locrian) {
          return 1;
      };
      return 0;
  };
  var lookUpScale = function (s) {
      return function (i) {
          var modi = i % notesInChromaticScale;
          var idx = (function () {
              var $22 = modi < 0;
              if ($22) {
                  return notesInChromaticScale - modi | 0;
              };
              return modi;
          })();
          return Data_Maybe.fromMaybe(new Data_Abc.KeyAccidental({
              pitchClass: Data_Abc.C.value, 
              accidental: Data_Abc.Natural.value
          }))(Data_List.index(s)(idx));
      };
  };
  var getHeaderMap = function (t) {
      var f = function (h) {
          if (h instanceof Data_Abc.Area) {
              return new Data_Tuple.Tuple("A", h);
          };
          if (h instanceof Data_Abc.Book) {
              return new Data_Tuple.Tuple("B", h);
          };
          if (h instanceof Data_Abc.Composer) {
              return new Data_Tuple.Tuple("C", h);
          };
          if (h instanceof Data_Abc.Discography) {
              return new Data_Tuple.Tuple("D", h);
          };
          if (h instanceof Data_Abc.FileUrl) {
              return new Data_Tuple.Tuple("F", h);
          };
          if (h instanceof Data_Abc.Group) {
              return new Data_Tuple.Tuple("G", h);
          };
          if (h instanceof Data_Abc.History) {
              return new Data_Tuple.Tuple("H", h);
          };
          if (h instanceof Data_Abc.Instruction) {
              return new Data_Tuple.Tuple("I", h);
          };
          if (h instanceof Data_Abc.Key) {
              return new Data_Tuple.Tuple("K", h);
          };
          if (h instanceof Data_Abc.UnitNoteLength) {
              return new Data_Tuple.Tuple("L", h);
          };
          if (h instanceof Data_Abc.Meter) {
              return new Data_Tuple.Tuple("M", h);
          };
          if (h instanceof Data_Abc.Macro) {
              return new Data_Tuple.Tuple("m", h);
          };
          if (h instanceof Data_Abc.Notes) {
              return new Data_Tuple.Tuple("N", h);
          };
          if (h instanceof Data_Abc.Origin) {
              return new Data_Tuple.Tuple("O", h);
          };
          if (h instanceof Data_Abc.Parts) {
              return new Data_Tuple.Tuple("P", h);
          };
          if (h instanceof Data_Abc.Tempo) {
              return new Data_Tuple.Tuple("Q", h);
          };
          if (h instanceof Data_Abc.Rhythm) {
              return new Data_Tuple.Tuple("R", h);
          };
          if (h instanceof Data_Abc.Remark) {
              return new Data_Tuple.Tuple("r", h);
          };
          if (h instanceof Data_Abc.Source) {
              return new Data_Tuple.Tuple("S", h);
          };
          if (h instanceof Data_Abc.SymbolLine) {
              return new Data_Tuple.Tuple("s", h);
          };
          if (h instanceof Data_Abc.Title) {
              return new Data_Tuple.Tuple("T", h);
          };
          if (h instanceof Data_Abc.UserDefined) {
              return new Data_Tuple.Tuple("U", h);
          };
          if (h instanceof Data_Abc.Voice) {
              return new Data_Tuple.Tuple("V", h);
          };
          if (h instanceof Data_Abc.WordsAfter) {
              return new Data_Tuple.Tuple("W", h);
          };
          if (h instanceof Data_Abc.WordsAligned) {
              return new Data_Tuple.Tuple("w", h);
          };
          if (h instanceof Data_Abc.ReferenceNumber) {
              return new Data_Tuple.Tuple("X", h);
          };
          if (h instanceof Data_Abc.Transcription) {
              return new Data_Tuple.Tuple("Z", h);
          };
          if (h instanceof Data_Abc.FieldContinuation) {
              return new Data_Tuple.Tuple("+", h);
          };
          if (h instanceof Data_Abc.Comment) {
              return new Data_Tuple.Tuple("-", h);
          };
          if (h instanceof Data_Abc.UnsupportedHeader) {
              return new Data_Tuple.Tuple("u", h);
          };
          throw new Error("Failed pattern match at Data.Abc.Notation line 111, column 7 - line 200, column 22: " + [ h.constructor.name ]);
      };
      var annotatedHeaders = Data_Functor.map(Data_List_Types.functorList)(f)(Data_List.reverse(t.headers));
      return Data_Map.fromFoldable(Data_Ord.ordChar)(Data_List_Types.foldableList)(annotatedHeaders);
  };
  var getHeader = function (code) {
      return function (t) {
          return Data_Map.lookup(Data_Ord.ordChar)(code)(getHeaderMap(t));
      };
  };
  var getKeySig = function (tune) {
      var v = getHeader("K")(tune);
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Abc.Key) {
          return new Data_Maybe.Just(v.value0.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var getMeter = function (tune) {
      var v = getHeader("M")(tune);
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Abc.Meter) {
          return new Data_Maybe.Just(Data_Maybe.fromMaybe(new Data_Tuple.Tuple(4, 4))(v.value0.value0));
      };
      return Data_Maybe.Nothing.value;
  };
  var getUnitNoteLength = function (tune) {
      var v = getHeader("L")(tune);
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Abc.UnitNoteLength) {
          return new Data_Maybe.Just(v.value0.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var flatScale = new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.C.value, 
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.D.value, 
      accidental: Data_Abc.Flat.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.D.value, 
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.E.value, 
      accidental: Data_Abc.Flat.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.E.value, 
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.F.value, 
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.G.value, 
      accidental: Data_Abc.Flat.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.G.value, 
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.A.value, 
      accidental: Data_Abc.Flat.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.A.value, 
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.B.value, 
      accidental: Data_Abc.Flat.value
  }), new Data_List_Types.Cons(new Data_Abc.KeyAccidental({
      pitchClass: Data_Abc.B.value, 
      accidental: Data_Abc.Natural.value
  }), Data_List_Types.Nil.value))))))))))));
  var normaliseModalKey = function (ks) {
      var scale = (function () {
          if (ks.accidental instanceof Data_Abc.Sharp) {
              return sharpScale;
          };
          if (ks.accidental instanceof Data_Abc.Flat) {
              return flatScale;
          };
          if (ks.pitchClass instanceof Data_Abc.F) {
              return flatScale;
          };
          return sharpScale;
      })();
      var keyAccidental = new Data_Abc.KeyAccidental({
          pitchClass: ks.pitchClass, 
          accidental: ks.accidental
      });
      var idx = Data_Maybe.fromMaybe(0)(Data_List.elemIndex(Data_Abc.eqKeyAccidental)(keyAccidental)(scale));
      var distance = modalDistance(ks.mode);
      var majorKeyIndex = (idx + distance | 0) % notesInChromaticScale;
      var majorKeyAcc = lookUpScale(scale)(majorKeyIndex);
      var $73 = 0 === distance;
      if ($73) {
          return ks;
      };
      return {
          pitchClass: majorKeyAcc.value0.pitchClass, 
          accidental: majorKeyAcc.value0.accidental, 
          mode: Data_Abc.Major.value
      };
  };
  var dotFactor = function (i) {
      if (i === 1) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(2);
      };
      if (i === 2) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(3)(4);
      };
      if (i === 3) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(7)(8);
      };
      return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(0)(1);
  };
  exports["dotFactor"] = dotFactor;
  exports["getHeader"] = getHeader;
  exports["getKeySig"] = getKeySig;
  exports["getMeter"] = getMeter;
  exports["getUnitNoteLength"] = getUnitNoteLength;
  exports["normaliseModalKey"] = normaliseModalKey;
  exports["notesInChromaticScale"] = notesInChromaticScale;
})(PS["Data.Abc.Notation"] = PS["Data.Abc.Notation"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  exports["uncons"] = uncons;
  exports["filter"] = $foreign.filter;
  exports["length"] = $foreign.length;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  function _codePointAt (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          var codePointArray = Array.from(s);
          var isWithinRange  = i >= 0 && i < codePointArray.length;

          return isWithinRange ? just(codePointArray[i].codePointAt(0)) : nothing;
        };
      };
    };
  }

  function _codePointAtP (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.codePointAt(i)) : nothing;
        };
      };
    };
  }

  function endsWith (searchString) {
    return function (s) {
      return s.endsWith(searchString);
    };
  }

  function endsWithP (searchString) {
    return function (position) {
      return function (s) {
        return s.endsWith(searchString, position);
      };
    };
  }

  function escapeRegex (str) {
    return str.replace(/[.*+?^${}()|[\]\-\\]/g, "\\$&");
  }

  function fromCharArray (array) {
    return array.join("");
  }

  function includes (searchString) {
    return function (str) {
      return str.includes(searchString);
    };
  }

  function includesP (needle) {
    return function (position) {
      return function (haystack) {
        // For negative `position` values, we search from the beginning of the
        // string. This is in accordance with the native
        // `String.prototype.include` function.
        var pos = Math.max(0, position);

        // Converting to arrays takes care of any surrogate code points
        var needleA    = Array.from(needle);
        var haystackA  = Array.from(haystack).slice(pos);
        var needleALen = needleA.length;

        var maxIndex = haystackA.length + 1 - needleALen;
        var found    = false;
        var i;

        // Naive implementation, at some point we should check whether Boyer-Moore
        // or Knuth-Morris-Pratt are worthwhile
        for (i = 0; i < maxIndex; i++) {
          if (needleA.every(function (e, j) { return e === haystackA[i+j]; })) {
            found = true;
            break;
          }
        }

        return found;
      };
    };
  }

  function length (str) {
    return Array.from(str).length;
  }

  function lines (str) {
    // See http://www.unicode.org/reports/tr18/#RL1.6
    return str.split(/\r\n|[\n\v\f\r\u0085\u2028\u2029]/);
  }

  function normalize (str) {
    return str.normalize();
  }

  function _normalizeP (normalizationForm) {
    return function (str) {
      return str.normalize(normalizationForm);
    };
  }

  function _repeat (just) {
    return function (nothing) {
      return function (n) {
        return function (str) {
          var result;

          try {
            result = just(str.repeat(n));
          }
          catch (error) {
            result = nothing;
          }

          return result;
        };
      };
    };
  }

  function startsWith (searchString) {
    return function (s) {
      return s.startsWith(searchString);
    };
  }

  function startsWithP (searchString) {
    return function (position) {
      return function (s) {
        return s.startsWith(searchString, position);
      };
    };
  }

  function stripChars (chars) {
    return function (s) {
      return s.replace(RegExp("[" + escapeRegex(chars) + "]", "g"), "");
    };
  }

  function stripDiacritics (str) {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  }

  function toCharArray (str) {
    return Array.from(str);
  }

  function unsafeCodePointAt (i) {
    return function (s) {
      var codePointArray = Array.from(s);
      var isWithinRange = i >= 0 && i < codePointArray.length;

      if (isWithinRange) {
        return codePointArray[i].codePointAt(0);
      }
      else {
        throw new Error("Data.String.Utils.unsafeCodePointAt: Invalid index");
      }
    };
  }

  function unsafeCodePointAtP (i) {
    return function (s) {
      if (i >= 0 && i < s.length) {
        return s.codePointAt(i);
      }
      else {
        throw new Error("Data.String.Utils.unsafeCodePointAt': Invalid index");
      }
    };
  }

  function unsafeRepeat (n) {
    return function (str) {
      try {
        return str.repeat(n);
      }
      catch (error) {
        throw new Error("Data.String.Utils.unsafeRepeat: Invalid count");
      }
    };
  }

  function words (s) {
    return s.split(/\s+/);
  }                                          
  exports.includes           = includes; 
  exports.length             = length; 
  exports.startsWith         = startsWith;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function(exports) {
    "use strict";

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null) {
            return nothing;
          } else {
            var list = [];
            for (var i = 0; i < m.length; i++) {
              list.push(m[i] == null ? nothing : just(m[i]));
            }
            return just(list);
          }
        };
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];        
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false, 
      ignoreCase: false, 
      multiline: false, 
      sticky: false, 
      unicode: false
  });
  exports["RegexFlags"] = RegexFlags;
  exports["noFlags"] = noFlags;
})(PS["Data.String.Regex.Flags"] = PS["Data.String.Regex.Flags"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Prelude = PS["Prelude"];                                                    
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["match"] = match;
  exports["regex"] = regex;
  exports["renderFlags"] = renderFlags;
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.String.Utils"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["includes"] = $foreign.includes;
  exports["length"] = $foreign.length;
  exports["startsWith"] = $foreign.startsWith;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var ParseError = (function () {
      function ParseError(value0) {
          this.value0 = value0;
      };
      ParseError.create = function (value0) {
          return new ParseError(value0);
      };
      return ParseError;
  })();
  var unParser = function (v) {
      return v;
  };
  var $$try = function (v) {
      return function (v1) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v2) {
              var $33 = {};
              for (var $34 in v2) {
                  if ({}.hasOwnProperty.call(v2, $34)) {
                      $33[$34] = v2[$34];
                  };
              };
              $33.pos = v1.pos;
              return $33;
          })(v(v1));
      };
  }; 
  var functorParser = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function ($82) {
              return Data_Functor.map(Data_Either.functorEither)(function (v1) {
                  return {
                      result: f(v1.result), 
                      suffix: v1.suffix
                  };
              })(v($82));
          };
      };
  });
  var fail = function (msg) {
      return function (v) {
          return new Data_Either.Left({
              pos: v.pos, 
              error: new ParseError(msg)
          });
      };
  }; 
  var applyParser = new Control_Apply.Apply(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(v1(v2.suffix))(function (v3) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          result: v2.result(v3.result), 
                          suffix: v3.suffix
                      });
                  });
              });
          };
      };
  });
  var bindParser = new Control_Bind.Bind(function () {
      return applyParser;
  }, function (v) {
      return function (f) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v1) {
                  return unParser(f(v1.result))(v1.suffix);
              });
          };
      };
  });
  var applicativeParser = new Control_Applicative.Applicative(function () {
      return applyParser;
  }, function (a) {
      return function (s) {
          return new Data_Either.Right({
              result: a, 
              suffix: s
          });
      };
  });
  var monadParser = new Control_Monad.Monad(function () {
      return applicativeParser;
  }, function () {
      return bindParser;
  });
  var monadRecParser = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadParser;
  }, function (f) {
      return function (a) {
          var split = function (v) {
              if (v.result instanceof Control_Monad_Rec_Class.Loop) {
                  return new Control_Monad_Rec_Class.Loop({
                      state: v.result.value0, 
                      str: v.suffix
                  });
              };
              if (v.result instanceof Control_Monad_Rec_Class.Done) {
                  return new Control_Monad_Rec_Class.Done({
                      result: v.result.value0, 
                      suffix: v.suffix
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.StringParser line 86, column 7 - line 86, column 70: " + [ v.constructor.name ]);
          };
          return function (str) {
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEither)(function (st) {
                  return Data_Functor.map(Data_Either.functorEither)(split)(unParser(f(st.state))(st.str));
              })({
                  state: a, 
                  str: str
              });
          };
      };
  });
  var altParser = new Control_Alt.Alt(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              var v2 = v(s);
              if (v2 instanceof Data_Either.Left) {
                  if (s.pos === v2.value0.pos) {
                      return v1(s);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Either.Left({
                          error: v2.value0.error, 
                          pos: v2.value0.pos
                      });
                  };
              };
              return v2;
          };
      };
  });
  var plusParser = new Control_Plus.Plus(function () {
      return altParser;
  }, fail("No alternative"));
  var alternativeParser = new Control_Alternative.Alternative(function () {
      return applicativeParser;
  }, function () {
      return plusParser;
  });
  exports["ParseError"] = ParseError;
  exports["fail"] = fail;
  exports["try"] = $$try;
  exports["unParser"] = unParser;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["altParser"] = altParser;
  exports["plusParser"] = plusParser;
  exports["alternativeParser"] = alternativeParser;
  exports["bindParser"] = bindParser;
  exports["monadParser"] = monadParser;
  exports["monadRecParser"] = monadRecParser;
})(PS["Text.Parsing.StringParser"] = PS["Text.Parsing.StringParser"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];        
  var withError = function (p) {
      return function (msg) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Text_Parsing_StringParser.fail(msg));
      };
  };
  var option = function (a) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
      };
  };
  var optionMaybe = function (p) {
      return option(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(p));
  };
  var many1Till = function (p) {
      return function (end) {
          var ending = function (acc) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(end)(function (v) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Done(Data_List.reverse(acc)));
              });
          };
          var $$continue = function (acc) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Loop(new Data_List_Types.Cons(v, acc)));
              });
          };
          var inner = function (acc) {
              return Control_Alt.alt(Text_Parsing_StringParser.altParser)(ending(acc))($$continue(acc));
          };
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
              return Control_Monad_Rec_Class.tailRecM(Text_Parsing_StringParser.monadRecParser)(inner)(Control_Applicative.pure(Data_List_Types.applicativeList)(v));
          });
      };
  };
  var manyTill = function (p) {
      return function (end) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(end)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value)))(many1Till(p)(end));
      };
  };
  var many = Data_List.manyRec(Text_Parsing_StringParser.monadRecParser)(Text_Parsing_StringParser.alternativeParser);
  var many1 = function (p) {
      return Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_Types.Cons.create)(p))(many(p));
  };
  var sepBy1 = function (p) {
      return function (sep) {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(many(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(sep)(p)))(function (v1) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Data_List_Types.Cons(v, v1));
              });
          });
      };
  };
  var sepBy = function (p) {
      return function (sep) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(sepBy1(p)(sep))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value));
      };
  };
  var choice = function (dictFoldable) {
      return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_StringParser.altParser))(Text_Parsing_StringParser.fail("Nothing to parse"));
  };
  var between = function (open) {
      return function (close) {
          return function (p) {
              return Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(open)(p))(close);
          };
      };
  };
  exports["between"] = between;
  exports["choice"] = choice;
  exports["many"] = many;
  exports["many1"] = many1;
  exports["many1Till"] = many1Till;
  exports["manyTill"] = manyTill;
  exports["option"] = option;
  exports["optionMaybe"] = optionMaybe;
  exports["sepBy"] = sepBy;
  exports["sepBy1"] = sepBy1;
  exports["withError"] = withError;
})(PS["Text.Parsing.StringParser.Combinators"] = PS["Text.Parsing.StringParser.Combinators"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = PS["Text.Parsing.StringParser.Combinators"];        
  var string = function (nt) {
      return function (s) {
          if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String["indexOf'"](nt)(s.pos)(s.str))(new Data_Maybe.Just(s.pos))) {
              return new Data_Either.Right({
                  result: nt, 
                  suffix: {
                      str: s.str, 
                      pos: s.pos + Data_String.length(nt) | 0
                  }
              });
          };
          return new Data_Either.Left({
              pos: s.pos, 
              error: new Text_Parsing_StringParser.ParseError("Expected '" + (nt + "'."))
          });
      };
  };
  var regex = function (pat) {
      var pattern = (function () {
          var v = Data_String.stripPrefix("^")(pat);
          if (v instanceof Data_Maybe.Nothing) {
              return "^" + pat;
          };
          return pat;
      })();
      var matchRegex = function (r) {
          return function (v) {
              var remainder = Data_String.drop(v.pos)(v.str);
              var v1 = Data_Array.uncons(Data_Maybe.fromMaybe([  ])(Data_String_Regex.match(r)(remainder)));
              if (v1 instanceof Data_Maybe.Just && v1.value0.head instanceof Data_Maybe.Just) {
                  return new Data_Either.Right({
                      result: v1.value0.head.value0, 
                      suffix: {
                          str: v.str, 
                          pos: v.pos + Data_String.length(v1.value0.head.value0) | 0
                      }
                  });
              };
              return new Data_Either.Left({
                  pos: v.pos, 
                  error: new Text_Parsing_StringParser.ParseError("no match")
              });
          };
      };
      var v = Data_String_Regex.regex(pattern)(Data_String_Regex_Flags.noFlags);
      if (v instanceof Data_Either.Left) {
          return Text_Parsing_StringParser.fail("Text.Parsing.StringParser.String.regex': illegal regex " + pat);
      };
      if (v instanceof Data_Either.Right) {
          return matchRegex(v.value0);
      };
      throw new Error("Failed pattern match at Text.Parsing.StringParser.String line 121, column 3 - line 125, column 19: " + [ v.constructor.name ]);
  };
  var eof = function (s) {
      if (s.pos < Data_String.length(s.str)) {
          return new Data_Either.Left({
              pos: s.pos, 
              error: new Text_Parsing_StringParser.ParseError("Expected EOF")
          });
      };
      return new Data_Either.Right({
          result: Data_Unit.unit, 
          suffix: s
      });
  };
  var anyChar = function (v) {
      var v1 = Data_String.charAt(v.pos)(v.str);
      if (v1 instanceof Data_Maybe.Just) {
          return new Data_Either.Right({
              result: v1.value0, 
              suffix: {
                  str: v.str, 
                  pos: v.pos + 1 | 0
              }
          });
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return new Data_Either.Left({
              pos: v.pos, 
              error: new Text_Parsing_StringParser.ParseError("Unexpected EOF")
          });
      };
      throw new Error("Failed pattern match at Text.Parsing.StringParser.String line 45, column 3 - line 47, column 64: " + [ v1.constructor.name ]);
  };  
  var satisfy = function (f) {
      return Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (v) {
          var $43 = f(v);
          if ($43) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v);
          };
          return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(v) + " did not satisfy predicate"));
      }));
  };
  var $$char = function (c) {
      return Text_Parsing_StringParser_Combinators.withError(satisfy(function (v) {
          return v === c;
      }))("Could not match character " + Data_Show.show(Data_Show.showChar)(c));
  };
  exports["anyChar"] = anyChar;
  exports["char"] = $$char;
  exports["eof"] = eof;
  exports["regex"] = regex;
  exports["satisfy"] = satisfy;
  exports["string"] = string;
})(PS["Text.Parsing.StringParser.String"] = PS["Text.Parsing.StringParser.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Utils = PS["Data.String.Utils"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = PS["Text.Parsing.StringParser.Combinators"];
  var Text_Parsing_StringParser_String = PS["Text.Parsing.StringParser.String"];        
  var TempoDesignation = (function () {
      function TempoDesignation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TempoDesignation.create = function (value0) {
          return function (value1) {
              return new TempoDesignation(value0, value1);
          };
      };
      return TempoDesignation;
  })();
  var tupletLength = Text_Parsing_StringParser_String.regex("[2-9]");
  var tup = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Control_Bind.join(Data_Maybe.bindMaybe))(Text_Parsing_StringParser_Combinators.optionMaybe(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String["char"](":"))(Text_Parsing_StringParser_Combinators.optionMaybe(tupletLength))));
  var toTupletInt = function (s) {
      return Data_Maybe.fromMaybe(3)(Data_Int.fromString(s));
  };
  var tab = Text_Parsing_StringParser_String["char"]("\x09");
  var strToEol = Text_Parsing_StringParser_String.regex("[^\x0d\x0a]*");
  var space = Text_Parsing_StringParser_String["char"](" ");
  var whiteSpace = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_String.singleton))(Text_Parsing_StringParser_Combinators.many(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ space, tab ])));
  var unsupportedHeaderCode = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.regex("[a-qt-vx-zEJ]:"))(whiteSpace);
  var unsupportedHeader = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.UnsupportedHeader.value)(unsupportedHeaderCode))(strToEol))("unsupported header");
  var slur = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Slur.create)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_String["char"]("("))(Text_Parsing_StringParser_String["char"](")"))))("slur");
  var shortDecoration = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_String.regex("[\\.~HLMOPSTuv]"))("short decoration");
  var sharpOrFlat = Data_Functor.map(Text_Parsing_StringParser.functorParser)(function (x) {
      var $9 = x === "#";
      if ($9) {
          return Data_Abc.Sharp.value;
      };
      return Data_Abc.Flat.value;
  })(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_String["char"]("#"))(Text_Parsing_StringParser_String["char"]("b")));
  var scoreSpace = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ tab, Text_Parsing_StringParser_String["char"]("y"), space ]);
  var spacer = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Spacer.create)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List.length)(Text_Parsing_StringParser_Combinators.many1(scoreSpace))))("space");
  var scientificPitchNotation = function (pc) {
      return function (oct) {
          var $10 = Data_String_Utils.includes(pc)("ABCDEFG");
          if ($10) {
              return Data_Abc.middlecOctave + oct | 0;
          };
          return (Data_Abc.middlecOctave + 1 | 0) + oct | 0;
      };
  };
  var runParser1 = function (v) {
      return function (s) {
          var formatErr = function (v1) {
              return {
                  pos: v1.pos, 
                  error: v1.error.value0
              };
          };
          return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(formatErr)(function (v1) {
              return v1.result;
          })(v({
              str: s, 
              pos: 0
          }));
      };
  };
  var quotedString = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.string("\""))(Text_Parsing_StringParser_String.regex("(\\\\\"|[^\"\x0a])*")))(Text_Parsing_StringParser_String.string("\"")))("quoted string");
  var spacedQuotedString = Text_Parsing_StringParser["try"](Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(quotedString))(whiteSpace));
  var pitch = Text_Parsing_StringParser_String.regex("[A-Ga-g]");
  var phrygian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Phrygian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[P|p][H|h][R|r][A-Za-z]*"));
  var octaveShift = function (s) {
      var up = Data_Array.length(Data_Array.filter(Data_Eq.eq(Data_Eq.eqChar)("'"))(Data_String.toCharArray(s)));
      var down = Data_Array.length(Data_Array.filter(Data_Eq.eq(Data_Eq.eqChar)(","))(Data_String.toCharArray(s)));
      return up - down | 0;
  };
  var nometer = Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Maybe.Nothing.value)(Text_Parsing_StringParser_String.string("none"));
  var newline = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_String.satisfy(Data_Eq.eq(Data_Eq.eqChar)("\x0a")))("expected newline");
  var moveOctave = Data_Functor.map(Text_Parsing_StringParser.functorParser)(octaveShift)(Text_Parsing_StringParser_String.regex("[',]*"));
  var mixolydian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Mixolydian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[M|m][I|i][X|x][A-Za-z]*"));
  var minor = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Minor.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[M|m][A-Za-z]*"));
  var maybeTie = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.optionMaybe(Text_Parsing_StringParser_String["char"]("-")))("tie");
  var manyTill1 = Text_Parsing_StringParser_Combinators.manyTill;
  var major = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Major.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[M|m][A|a][J|j][A-Za-z]*"));
  var lydian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Lydian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[L|l][Y|y][D|d][A-Za-z]*"));
  var lookupPitch = function (p) {
      var v = Data_String.toUpper(p);
      if (v === "A") {
          return Data_Abc.A.value;
      };
      if (v === "B") {
          return Data_Abc.B.value;
      };
      if (v === "C") {
          return Data_Abc.C.value;
      };
      if (v === "D") {
          return Data_Abc.D.value;
      };
      if (v === "E") {
          return Data_Abc.E.value;
      };
      if (v === "F") {
          return Data_Abc.F.value;
      };
      if (v === "G") {
          return Data_Abc.G.value;
      };
      return Data_Abc.C.value;
  };
  var longDecoration = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_String["char"]("!"))(Text_Parsing_StringParser_String["char"]("!"))(Text_Parsing_StringParser_String.regex("[^\x0d\x0a!]*")))("long decoration");
  var locrian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Locrian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[L|l][O|o][C|c][A-Za-z]*"));
  var keyName = Text_Parsing_StringParser_String.regex("[A-G]");
  var ionian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Ionian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[I|i][O|o][N|n][A-Za-z]*"));
  var inlineInfo = function (isInline) {
      var pattern = (function () {
          if (isInline) {
              return "[^\x0d\x0a\\[\\]]*";
          };
          return "[^\x0d\x0a]*";
      })();
      return Text_Parsing_StringParser_String.regex(pattern);
  };
  var ignore = Text_Parsing_StringParser_Combinators.withError(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Ignore.value)(Text_Parsing_StringParser_String.regex("[#@;`\\*\\?]+")))("ignored character");
  var headerCode = function (c) {
      var pattern = Data_String.fromCharArray([ c, ":" ]);
      return Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.string(pattern))(whiteSpace);
  };
  var history = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.History.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("H"))(strToEol)))("H header");
  var instruction = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Instruction.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("I"))(inlineInfo(isInline))))("I header");
  };
  var macro = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Macro.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("m"))(inlineInfo(isInline))))("m header");
  };
  var notes = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Notes.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("N"))(inlineInfo(isInline))))("N header");
  };
  var origin = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Origin.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("O"))(strToEol)))("O header");
  var parts = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Parts.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("P"))(inlineInfo(isInline))))("P header");
  };
  var remark = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Remark.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("r"))(inlineInfo(isInline))))("r header");
  };
  var rhythm = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Rhythm.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("R"))(inlineInfo(isInline))))("R header");
  };
  var source = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Source.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("S"))(strToEol)))("S header");
  var symbolLine = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.SymbolLine.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("s"))(inlineInfo(isInline))))("s header");
  };
  var title = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Title.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("T"))(inlineInfo(isInline))))("T header");
  };
  var transcription = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Transcription.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("Z"))(strToEol)))("Z header");
  var userDefined = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.UserDefined.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("U"))(inlineInfo(isInline))))("U header");
  };
  var voice = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Voice.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("V"))(inlineInfo(isInline))))("V header");
  };
  var wordsAfter = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.WordsAfter.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("W"))(inlineInfo(isInline))))("W header");
  };
  var wordsAligned = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.WordsAligned.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("w"))(inlineInfo(isInline))))("w header");
  };
  var tuneBodyOnlyInfo = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ symbolLine(isInline), wordsAligned(isInline) ]))("tune body only info");
  };
  var group = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Group.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("G"))(strToEol)))("G header");
  var fileUrl = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.FileUrl.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("F"))(strToEol)))("F header");
  var fieldContinuation = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.FieldContinuation.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("+"))(strToEol)))("field continuation");
  var endOfLine = Text_Parsing_StringParser_String.regex("\x0d\x0a");
  var dorian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Dorian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[D|d][O|o][R|r][A-Za-z]*"));
  var discography = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Discography.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("D"))(strToEol)))("D header");
  var decoration = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Decoration.create)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(shortDecoration)(longDecoration)))("decoration");
  var cutTime = Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(new Data_Maybe.Just(new Data_Tuple.Tuple(2, 2)))(Text_Parsing_StringParser_String.string("C|"));
  var crlf = Text_Parsing_StringParser_Combinators.withError(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)("\x0a")(endOfLine))("expected crlf");
  var eol = Control_Alt.alt(Text_Parsing_StringParser.altParser)(newline)(crlf);
  var continuation = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Continuation.value)(Text_Parsing_StringParser_String["char"]("\\")))(Text_Parsing_StringParser_String.regex("[^\x0d\x0a]*")))("continuation");
  var composer = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Composer.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("C"))(strToEol)))("C header");
  var commonTime = Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(new Data_Maybe.Just(new Data_Tuple.Tuple(4, 4)))(Text_Parsing_StringParser_String["char"]("C"));
  var comment = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Comment.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.regex("%"))(strToEol)))("comment");
  var chordSymbol = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.ChordSymbol.create)(quotedString))("chord symbol");
  var buildTupletSignature = function (ps) {
      return function (mq) {
          return function (mr) {
              var p = toTupletInt(ps);
              var qdefault = (function () {
                  if (p === 2) {
                      return 3;
                  };
                  if (p === 3) {
                      return 2;
                  };
                  if (p === 4) {
                      return 3;
                  };
                  if (p === 6) {
                      return 2;
                  };
                  if (p === 8) {
                      return 3;
                  };
                  return 2;
              })();
              var q = Data_Maybe.fromMaybe(qdefault)(Data_Functor.map(Data_Maybe.functorMaybe)(toTupletInt)(mq));
              var r = Data_Maybe.fromMaybe(p)(Data_Functor.map(Data_Maybe.functorMaybe)(toTupletInt)(mr));
              return {
                  p: p, 
                  q: q, 
                  r: r
              };
          };
      };
  };
  var tupletSignature = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTupletSignature)(tupletLength))(tup))(tup))(whiteSpace);
  var buildTempoSignature3 = function (bpm) {
      var noteLengths = Data_List.singleton(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(4));
      return {
          noteLengths: noteLengths, 
          bpm: bpm, 
          marking: Data_Maybe.Nothing.value
      };
  };
  var buildTempoSignature = function (marking) {
      return function (td) {
          return {
              noteLengths: td.value0, 
              bpm: td.value1, 
              marking: marking
          };
      };
  };
  var buildTempoSignature2 = function (marking) {
      return function (td) {
          return buildTempoSignature(new Data_Maybe.Just(marking))(td);
      };
  };
  var buildRest = function (r) {
      return {
          duration: r
      };
  };
  var buildRationalFromSlashList = function (xs) {
      var f = function (i) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(Data_Int.pow(2)(i));
      };
      return f(Data_List.length(xs));
  };
  var manySlashes = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildRationalFromSlashList)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_Types.Cons.create)(Text_Parsing_StringParser_String["char"]("/")))(Text_Parsing_StringParser_Combinators.many1(Text_Parsing_StringParser_String["char"]("/"))));
  var buildNote = function (macc) {
      return function (pitchStr) {
          return function (octave) {
              return function (ml) {
                  return function (mt) {
                      var tied = (function () {
                          if (mt instanceof Data_Maybe.Just) {
                              return true;
                          };
                          return false;
                      })();
                      var spn = scientificPitchNotation(pitchStr)(octave);
                      var p = lookupPitch(Data_String.toUpper(pitchStr));
                      var l = Data_Maybe.fromMaybe(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(1))(ml);
                      return {
                          pitchClass: p, 
                          accidental: macc, 
                          octave: spn, 
                          duration: l, 
                          tied: tied
                      };
                  };
              };
          };
      };
  };
  var buildKeySignature = function (pStr) {
      return function (ma) {
          return function (mm) {
              return {
                  pitchClass: lookupPitch(pStr), 
                  accidental: ma, 
                  mode: Data_Maybe.fromMaybe(Data_Abc.Major.value)(mm)
              };
          };
      };
  };
  var buildKeyAccidental = function (a) {
      return function (pitchStr) {
          return new Data_Abc.KeyAccidental({
              pitchClass: lookupPitch(pitchStr), 
              accidental: a
          });
      };
  };
  var buildKey = function (code) {
      return function (ks) {
          return function (kas) {
              return new Data_Abc.Key({
                  keySignature: ks, 
                  modifications: kas
              });
          };
      };
  };
  var buildChord = function (ns) {
      return function (ml) {
          var l = Data_Maybe.fromMaybe(Data_Rational.fromInt(1))(ml);
          return {
              notes: ns, 
              duration: l
          };
      };
  };
  var buildBrokenOperator = function (s) {
      var $25 = Data_String_Utils.startsWith("<")(s);
      if ($25) {
          return new Data_Abc.LeftArrow(Data_String_Utils.length(s));
      };
      return new Data_Abc.RightArrow(Data_String_Utils.length(s));
  };
  var buildBarline = function (s) {
      return function (i) {
          var thickness = (function () {
              var $26 = Data_String_Utils.includes("|]")(s);
              if ($26) {
                  return Data_Abc.ThinThick.value;
              };
              var $27 = Data_String_Utils.includes("[|")(s);
              if ($27) {
                  return Data_Abc.ThickThin.value;
              };
              var $28 = Data_String_Utils.includes("||")(s);
              if ($28) {
                  return Data_Abc.ThinThin.value;
              };
              return Data_Abc.Thin.value;
          })();
          var f = function (c) {
              if (c === "[") {
                  return "|";
              };
              if (c === "]") {
                  return "|";
              };
              return c;
          };
          var normalised = Data_Functor.map(Data_Functor.functorArray)(f)(Data_String.toCharArray(s));
          var repeatCount = Data_Array.length(Data_Array.filter(function (c) {
              return c === ":";
          })(normalised));
          var repeat = (function () {
              var $30 = repeatCount === 0;
              if ($30) {
                  return Data_Maybe.Nothing.value;
              };
              var $31 = repeatCount === 1;
              if ($31) {
                  var $32 = Data_String_Utils.includes(":|")(Data_String.fromCharArray(normalised));
                  if ($32) {
                      return new Data_Maybe.Just(Data_Abc.End.value);
                  };
                  return new Data_Maybe.Just(Data_Abc.Begin.value);
              };
              return new Data_Maybe.Just(Data_Abc.BeginAndEnd.value);
          })();
          return new Data_Abc.Barline({
              thickness: thickness, 
              repeat: repeat, 
              iteration: i
          });
      };
  };
  var buildBar = function (t) {
      return function (r) {
          return function (i) {
              return {
                  thickness: t, 
                  repeat: r, 
                  iteration: i
              };
          };
      };
  };
  var buildAnnotation = function (s) {
      var firstChar = Data_String.charAt(0)(s);
      var placement = (function () {
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === "^") {
              return Data_Abc.AboveNextSymbol.value;
          };
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === "_") {
              return Data_Abc.BelowNextSymbol.value;
          };
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === "<") {
              return Data_Abc.LeftOfNextSymbol.value;
          };
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === ">") {
              return Data_Abc.RightOfNextSymbol.value;
          };
          return Data_Abc.Discretional.value;
      })();
      return new Data_Abc.Annotation(placement, s);
  };
  var buildAccidental = function (s) {
      if (s === "^^") {
          return Data_Abc.DoubleSharp.value;
      };
      if (s === "__") {
          return Data_Abc.DoubleFlat.value;
      };
      if (s === "^") {
          return Data_Abc.Sharp.value;
      };
      if (s === "_") {
          return Data_Abc.Flat.value;
      };
      return Data_Abc.Natural.value;
  };
  var buildAbcTune = function (hs) {
      return function (b) {
          return {
              headers: hs, 
              body: b
          };
      };
  };
  var brokenRhythmOperator = Text_Parsing_StringParser_String.regex("(<+|>+)");
  var brokenRhythmTie = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBrokenOperator)(brokenRhythmOperator))(whiteSpace);
  var book = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Book.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("B"))(strToEol)))("B Header");
  var barSeparator = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser_String.string("[|"), Text_Parsing_StringParser_String.string("|]:"), Text_Parsing_StringParser_String.string("|]"), Text_Parsing_StringParser_String.string("]|:"), Text_Parsing_StringParser_String.string("]|"), Text_Parsing_StringParser_String.string(":[|"), Text_Parsing_StringParser_String.string("|:"), Text_Parsing_StringParser_String.string(":|:"), Text_Parsing_StringParser_String.string(":||:"), Text_Parsing_StringParser_String.string(":|]"), Text_Parsing_StringParser_String.string(":||"), Text_Parsing_StringParser_String.string(":|"), Text_Parsing_StringParser_String.string("::"), Text_Parsing_StringParser_String.string("||:"), Text_Parsing_StringParser_String.string("||"), Text_Parsing_StringParser_String.string("|") ]);
  var area = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Area.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("A"))(strToEol)))("A header");
  var anyInt = Text_Parsing_StringParser_String.regex("(0|[1-9][0-9]*)");
  var $$int = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Functor.map(Data_Functor.functorFn)(Data_Maybe.fromMaybe(1))(Data_Int.fromString))(anyInt))("expected a positive integer");
  var anyRat = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Text_Parsing_StringParser_Combinators.option(1)($$int)))(Text_Parsing_StringParser_String["char"]("/")))(Text_Parsing_StringParser_Combinators.option(2)($$int));
  var degenerateBarRepeat = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Barline.create)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBar(Data_Abc.Thin.value)(Data_Maybe.Nothing.value))(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(Text_Parsing_StringParser_String["char"]("[")))($$int))));
  var degenerateTempo = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTempoSignature3)($$int);
  var integralAsRational = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Rational.fromInt)($$int);
  var noteDur = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](manySlashes), Text_Parsing_StringParser["try"](anyRat), integralAsRational ]);
  var meterSignature = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Tuple.Tuple.create)($$int))(Text_Parsing_StringParser_String["char"]("/")))($$int))(whiteSpace));
  var meterDefinition = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ cutTime, commonTime, meterSignature, nometer ]);
  var meter = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Meter.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("M"))(meterDefinition)))("M header");
  var rational = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))($$int))(Text_Parsing_StringParser_String["char"]("/")))($$int);
  var headerRational = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(rational)(whiteSpace);
  var noteDuration = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(rational)(whiteSpace);
  var unitNoteLength = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.UnitNoteLength.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("L"))(noteDuration)))("L header");
  var referenceNumber = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.ReferenceNumber.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("X"))($$int)))("x header");
  var tuneInfo = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ area, book, composer, discography, fileUrl, group, history, origin, source, referenceNumber, transcription, unsupportedHeader ]))("tune info");
  var repeatSection = $$int;
  var normalBarline = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBarline)(barSeparator))(Text_Parsing_StringParser_Combinators.optionMaybe(repeatSection)))("barline");
  var barline = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ normalBarline, degenerateBarRepeat ]);
  var tempoDesignation = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(TempoDesignation.create)(Text_Parsing_StringParser_Combinators.many1(headerRational)))(Text_Parsing_StringParser_String["char"]("=")))($$int);
  var prefixedTempoDesignation = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTempoSignature2)(spacedQuotedString))(tempoDesignation);
  var suffixedTempoDesignation = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Function.flip(buildTempoSignature2))(tempoDesignation))(spacedQuotedString);
  var unlabelledTempoDesignation = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTempoSignature(Data_Maybe.Nothing.value))(tempoDesignation);
  var tempoSignature = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](suffixedTempoDesignation), Text_Parsing_StringParser["try"](unlabelledTempoDesignation), degenerateTempo, prefixedTempoDesignation ]))(whiteSpace);
  var tempo = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Tempo.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("Q"))(tempoSignature)))("Q header");
  var annotationString = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.string("\""))(Text_Parsing_StringParser_String.regex("[\\^\\>\\<-@](\\\\\"|[^\"\x0a])*")))(Text_Parsing_StringParser_String.string("\"")))("annotation");
  var annotation = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildAnnotation)(annotationString))("annotation");
  var aeolian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Aeolian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[A|a][E|e][O|o][A-Za-z]*"));
  var mode = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](major), ionian, dorian, phrygian, lydian, mixolydian, aeolian, locrian, minor ]);
  var keySignature = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildKeySignature)(keyName))(Text_Parsing_StringParser_Combinators.option(Data_Abc.Natural.value)(sharpOrFlat)))(whiteSpace))(Text_Parsing_StringParser_Combinators.optionMaybe(mode));
  var accidental = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildAccidental)(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser_String.string("^^"), Text_Parsing_StringParser_String.string("__"), Text_Parsing_StringParser_String.string("^"), Text_Parsing_StringParser_String.string("_"), Text_Parsing_StringParser_String.string("=") ]));
  var keyAccidental = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildKeyAccidental)(accidental))(pitch);
  var keyAccidentals = Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(Text_Parsing_StringParser_Combinators.sepBy(keyAccidental)(space));
  var key = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildKey)(headerCode("K")))(keySignature))(keyAccidentals))("K header");
  var anywhereInfo = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ instruction(isInline), key, unitNoteLength, meter, macro(isInline), notes(isInline), parts(isInline), tempo, rhythm(isInline), remark(isInline), title(isInline), userDefined(isInline), voice(isInline), wordsAfter(isInline), fieldContinuation, comment ]))("anywhere info");
  };
  var informationField = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ anywhereInfo(isInline), tuneInfo ]))("header");
  };
  var header = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(informationField(false))(eol);
  var headers = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.many(header))("headers");
  var tuneBodyInfo = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ tuneBodyOnlyInfo(isInline), anywhereInfo(isInline) ]))("tune body info");
  };
  var inline = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Inline.create)(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_String["char"]("["))(Text_Parsing_StringParser_String["char"]("]"))(tuneBodyInfo(true))))("inline header");
  var tuneBodyHeader = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.BodyInfo.create)(tuneBodyInfo(true)))(eol))("tune body header");
  var maybeAccidental = Text_Parsing_StringParser_Combinators.optionMaybe(accidental);
  var acciaccatura = Data_Functor.map(Text_Parsing_StringParser.functorParser)(function (v) {
      return true;
  })(Text_Parsing_StringParser_Combinators.optionMaybe(Text_Parsing_StringParser_String["char"]("/")));
  var abcRest = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildRest)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.fromMaybe(Data_Rational.fromInt(1)))(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.regex("[XxZz]"))(Text_Parsing_StringParser_Combinators.optionMaybe(noteDur)))))("abcRest");
  var rest = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Rest.create)(abcRest))("rest");
  var abcNote = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildNote)(maybeAccidental))(pitch))(moveOctave))(Text_Parsing_StringParser_Combinators.optionMaybe(noteDur)))(maybeTie))("ABC note");
  var brokenRhythmPair = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.BrokenRhythmPair.create)(abcNote))(brokenRhythmTie))(abcNote))("broken rhythm pair");
  var grace = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.GraceNote.create)(acciaccatura))(Text_Parsing_StringParser_Combinators.many1(abcNote));
  var graceNote = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_String["char"]("{"))(Text_Parsing_StringParser_String["char"]("}"))(grace))("grace note");
  var note = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Note.create)(abcNote);
  var restOrNote = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Either.Left.create)(abcRest))(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Either.Right.create)(abcNote));
  var tuplet = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Tuplet.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String["char"]("("))(tupletSignature)))(Text_Parsing_StringParser_Combinators.many1(restOrNote)))("tuplet");
  var abcChord = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildChord)(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_String["char"]("["))(Text_Parsing_StringParser_String["char"]("]"))(Text_Parsing_StringParser_Combinators.many1(abcNote))))(Text_Parsing_StringParser_Combinators.optionMaybe(noteDur)))("ABC chord");
  var chord = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Chord.create)(abcChord))("chord");
  var scoreItem = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](chord), Text_Parsing_StringParser["try"](inline), continuation, ignore, spacer, decoration, chordSymbol, annotation, graceNote, Text_Parsing_StringParser["try"](tuplet), slur, rest, Text_Parsing_StringParser["try"](brokenRhythmPair), note, barline ]))("score item");
  var score = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Score.create)(manyTill1(scoreItem)(eol));
  var body = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_Types.Cons.create)(score))(Text_Parsing_StringParser_Combinators.manyTill(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser["try"](tuneBodyHeader))(score))(Text_Parsing_StringParser_String.eof));
  var abc = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildAbcTune)(headers))(body);
  var parse = function (s) {
      var v = runParser1(abc)(s);
      if (v instanceof Data_Either.Right) {
          return new Data_Either.Right(v.value0);
      };
      if (v instanceof Data_Either.Left) {
          return new Data_Either.Left(v.value0);
      };
      throw new Error("Failed pattern match at Data.Abc.Parser line 1395, column 5 - line 1400, column 19: " + [ v.constructor.name ]);
  };
  exports["parse"] = parse;
})(PS["Data.Abc.Parser"] = PS["Data.Abc.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Either = PS["Data.Either"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Whole = (function () {
      function Whole() {

      };
      Whole.value = new Whole();
      return Whole;
  })();
  var Half = (function () {
      function Half() {

      };
      Half.value = new Half();
      return Half;
  })();
  var Quarter = (function () {
      function Quarter() {

      };
      Quarter.value = new Quarter();
      return Quarter;
  })();
  var Eighth = (function () {
      function Eighth() {

      };
      Eighth.value = new Eighth();
      return Eighth;
  })();
  var Sixteenth = (function () {
      function Sixteenth() {

      };
      Sixteenth.value = new Sixteenth();
      return Sixteenth;
  })();
  var ThirtySecond = (function () {
      function ThirtySecond() {

      };
      ThirtySecond.value = new ThirtySecond();
      return ThirtySecond;
  })();
  var SixtyFourth = (function () {
      function SixtyFourth() {

      };
      SixtyFourth.value = new SixtyFourth();
      return SixtyFourth;
  })();
  var HalfDotted = (function () {
      function HalfDotted() {

      };
      HalfDotted.value = new HalfDotted();
      return HalfDotted;
  })();
  var QuarterDotted = (function () {
      function QuarterDotted() {

      };
      QuarterDotted.value = new QuarterDotted();
      return QuarterDotted;
  })();
  var EighthDotted = (function () {
      function EighthDotted() {

      };
      EighthDotted.value = new EighthDotted();
      return EighthDotted;
  })();
  var SixteenthDotted = (function () {
      function SixteenthDotted() {

      };
      SixteenthDotted.value = new SixteenthDotted();
      return SixteenthDotted;
  })();
  var ThirtySecondDotted = (function () {
      function ThirtySecondDotted() {

      };
      ThirtySecondDotted.value = new ThirtySecondDotted();
      return ThirtySecondDotted;
  })();
  var SixtyFourthDotted = (function () {
      function SixtyFourthDotted() {

      };
      SixtyFourthDotted.value = new SixtyFourthDotted();
      return SixtyFourthDotted;
  })();
  var VNote = (function () {
      function VNote(value0) {
          this.value0 = value0;
      };
      VNote.create = function (value0) {
          return new VNote(value0);
      };
      return VNote;
  })();
  var VRest = (function () {
      function VRest(value0) {
          this.value0 = value0;
      };
      VRest.create = function (value0) {
          return new VRest(value0);
      };
      return VRest;
  })();
  var VBar = (function () {
      function VBar(value0) {
          this.value0 = value0;
      };
      VBar.create = function (value0) {
          return new VBar(value0);
      };
      return VBar;
  })();
  var VTuplet = (function () {
      function VTuplet(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      VTuplet.create = function (value0) {
          return function (value1) {
              return new VTuplet(value0, value1);
          };
      };
      return VTuplet;
  })();
  var VChord = (function () {
      function VChord(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      VChord.create = function (value0) {
          return function (value1) {
              return new VChord(value0, value1);
          };
      };
      return VChord;
  })();
  var VNotePair = (function () {
      function VNotePair(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      VNotePair.create = function (value0) {
          return function (value1) {
              return new VNotePair(value0, value1);
          };
      };
      return VNotePair;
  })();
  var VIgnore = (function () {
      function VIgnore() {

      };
      VIgnore.value = new VIgnore();
      return VIgnore;
  })();
  var Treble = (function () {
      function Treble() {

      };
      Treble.value = new Treble();
      return Treble;
  })();
  var Bass = (function () {
      function Bass() {

      };
      Bass.value = new Bass();
      return Bass;
  })();
  var VLine = (function () {
      function VLine(value0) {
          this.value0 = value0;
      };
      VLine.create = function (value0) {
          return new VLine(value0);
      };
      return VLine;
  })();
  var VContextChange = (function () {
      function VContextChange() {

      };
      VContextChange.value = new VContextChange();
      return VContextChange;
  })();
  var VEmptyLine = (function () {
      function VEmptyLine() {

      };
      VEmptyLine.value = new VEmptyLine();
      return VEmptyLine;
  })();
  var showVexDuration = new Data_Show.Show(function (v) {
      if (v instanceof Whole) {
          return ":w";
      };
      if (v instanceof Half) {
          return ":h";
      };
      if (v instanceof Quarter) {
          return ":q";
      };
      if (v instanceof Eighth) {
          return ":8";
      };
      if (v instanceof Sixteenth) {
          return ":16";
      };
      if (v instanceof ThirtySecond) {
          return ":32";
      };
      if (v instanceof SixtyFourth) {
          return ":64";
      };
      if (v instanceof HalfDotted) {
          return ":hd";
      };
      if (v instanceof QuarterDotted) {
          return ":qd";
      };
      if (v instanceof EighthDotted) {
          return ":8d";
      };
      if (v instanceof SixteenthDotted) {
          return ":16d";
      };
      if (v instanceof ThirtySecondDotted) {
          return ":32d";
      };
      if (v instanceof SixtyFourthDotted) {
          return ":64d";
      };
      throw new Error("Failed pattern match at VexTab.Abc.VexScore line 74, column 3 - line 75, column 3: " + [ v.constructor.name ]);
  });
  var showClef = new Data_Show.Show(function (v) {
      if (v instanceof Treble) {
          return "treble";
      };
      if (v instanceof Bass) {
          return "bass";
      };
      throw new Error("Failed pattern match at VexTab.Abc.VexScore line 54, column 4 - line 55, column 4: " + [ v.constructor.name ]);
  });
  exports["Treble"] = Treble;
  exports["Bass"] = Bass;
  exports["VLine"] = VLine;
  exports["VContextChange"] = VContextChange;
  exports["VEmptyLine"] = VEmptyLine;
  exports["Whole"] = Whole;
  exports["Half"] = Half;
  exports["Quarter"] = Quarter;
  exports["Eighth"] = Eighth;
  exports["Sixteenth"] = Sixteenth;
  exports["ThirtySecond"] = ThirtySecond;
  exports["SixtyFourth"] = SixtyFourth;
  exports["HalfDotted"] = HalfDotted;
  exports["QuarterDotted"] = QuarterDotted;
  exports["EighthDotted"] = EighthDotted;
  exports["SixteenthDotted"] = SixteenthDotted;
  exports["ThirtySecondDotted"] = ThirtySecondDotted;
  exports["SixtyFourthDotted"] = SixtyFourthDotted;
  exports["VNote"] = VNote;
  exports["VRest"] = VRest;
  exports["VBar"] = VBar;
  exports["VTuplet"] = VTuplet;
  exports["VChord"] = VChord;
  exports["VNotePair"] = VNotePair;
  exports["VIgnore"] = VIgnore;
  exports["showClef"] = showClef;
  exports["showVexDuration"] = showVexDuration;
})(PS["VexTab.Abc.VexScore"] = PS["VexTab.Abc.VexScore"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var VexTab_Abc_VexScore = PS["VexTab.Abc.VexScore"];        
  var Staved = (function () {
      function Staved() {

      };
      Staved.value = new Staved();
      return Staved;
  })();
  var Tupleted = (function () {
      function Tupleted() {

      };
      Tupleted.value = new Tupleted();
      return Tupleted;
  })();
  var Chordal = (function () {
      function Chordal() {

      };
      Chordal.value = new Chordal();
      return Chordal;
  })();
  var vexDecoration = function (v) {
      var isTopPosition = v.octave > 4;
      var formatDecoration = function (isTop) {
          return function (vexCode) {
              var position = (function () {
                  if (isTop) {
                      return "/top";
                  };
                  return "/bottom";
              })();
              return " $.a" + (vexCode + (position + ".$"));
          };
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === ".") {
          return formatDecoration(isTopPosition)(".");
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === "H") {
          return formatDecoration(true)("@a");
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === "L") {
          return formatDecoration(true)(">");
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === "u") {
          return formatDecoration(true)("|");
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === "v") {
          return formatDecoration(true)("m");
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === "1") {
          return " $.top.$ $1\u2500\u2500\u2500$";
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === "2") {
          return " $.top.$ $2\u2500\u2500\u2500$";
      };
      return "";
  };
  var vexBar = function (b) {
      if (b.repeat instanceof Data_Maybe.Just && b.repeat.value0 instanceof Data_Abc.Begin) {
          return " =|:";
      };
      if (b.repeat instanceof Data_Maybe.Just && b.repeat.value0 instanceof Data_Abc.End) {
          return " =:|";
      };
      if (b.repeat instanceof Data_Maybe.Just && b.repeat.value0 instanceof Data_Abc.BeginAndEnd) {
          return " =::";
      };
      if (b.repeat instanceof Data_Maybe.Nothing) {
          if (b.thickness instanceof Data_Abc.Thin) {
              return " |";
          };
          return " =||";
      };
      throw new Error("Failed pattern match at VexTab.Abc.Canonical line 216, column 3 - line 234, column 1: " + [ b.repeat.constructor.name ]);
  };
  var options = "options beam-rests=false\x0d\x0a";
  var nicelySpace = function (xs) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(xs);
  };
  var vexRest = function (r) {
      var dur = Data_Show.show(VexTab_Abc_VexScore.showVexDuration)(r.duration);
      return nicelySpace([ "", dur, "##" ]);
  };
  var mode = function (m) {
      if (m instanceof Data_Abc.Major) {
          return "";
      };
      if (m instanceof Data_Abc.Minor) {
          return "m";
      };
      if (m instanceof Data_Abc.Ionian) {
          return "";
      };
      if (m instanceof Data_Abc.Aeolian) {
          return "m";
      };
      return "error not supported";
  };
  var headerAccidental = function (a) {
      if (a instanceof Data_Abc.Sharp) {
          return "#";
      };
      if (a instanceof Data_Abc.Flat) {
          return "b";
      };
      return "";
  };
  var eol = "\x0d\x0a";
  var vexStave = function (mvs) {
      if (mvs instanceof Data_Maybe.Just) {
          var time = (function () {
              if (mvs.value0.mMeter instanceof Data_Maybe.Just) {
                  return "time=" + (Data_Show.show(Data_Show.showInt)(Data_Tuple.fst(mvs.value0.mMeter.value0)) + ("/" + Data_Show.show(Data_Show.showInt)(Data_Tuple.snd(mvs.value0.mMeter.value0))));
              };
              return "";
          })();
          var key = (function () {
              if (mvs.value0.mKey instanceof Data_Maybe.Just) {
                  var md = mode(mvs.value0.mKey.value0.mode);
                  var accidental$prime = headerAccidental(mvs.value0.mKey.value0.accidental);
                  return "key=" + (Data_Show.show(Data_Abc.showPitchClass)(mvs.value0.mKey.value0.pitchClass) + (accidental$prime + md));
              };
              return "";
          })();
          var clef = "clef=" + Data_Show.show(VexTab_Abc_VexScore.showClef)(mvs.value0.clef);
          return nicelySpace([ "stave notation=true", clef, key, time, eol, "notes" ]);
      };
      if (mvs instanceof Data_Maybe.Nothing) {
          return " notes";
      };
      throw new Error("Failed pattern match at VexTab.Abc.Canonical line 66, column 3 - line 96, column 1: " + [ mvs.constructor.name ]);
  };
  var accidental = function (a) {
      if (a instanceof Data_Abc.Sharp) {
          return "#";
      };
      if (a instanceof Data_Abc.Flat) {
          return "@";
      };
      if (a instanceof Data_Abc.DoubleSharp) {
          return "##";
      };
      if (a instanceof Data_Abc.DoubleFlat) {
          return "@@";
      };
      if (a instanceof Data_Abc.Natural) {
          return "n";
      };
      throw new Error("Failed pattern match at VexTab.Abc.Canonical line 198, column 3 - line 214, column 1: " + [ a.constructor.name ]);
  };
  var vexNote = function (ctx) {
      return function (vnote) {
          var tie = (function () {
              if (vnote.tied) {
                  return "T";
              };
              return "";
          })();
          var dur = Data_Show.show(VexTab_Abc_VexScore.showVexDuration)(vnote.duration);
          var decor = vexDecoration(vnote);
          var accident = Data_Maybe.fromMaybe("")(Data_Functor.map(Data_Maybe.functorMaybe)(accidental)(vnote.accidental));
          var pitch = Data_Show.show(Data_Abc.showPitchClass)(vnote.pitchClass) + (accident + ("/" + Data_Show.show(Data_Show.showInt)(vnote.octave)));
          if (ctx instanceof Chordal) {
              return pitch;
          };
          if (ctx instanceof Tupleted) {
              return nicelySpace([ dur, pitch ]);
          };
          if (vnote.tied) {
              return nicelySpace([ "", dur, tie, pitch ]) + decor;
          };
          return nicelySpace([ "", dur, pitch ]) + decor;
      };
  };
  var vexRestOrNote = function (vrn) {
      if (vrn instanceof Data_Either.Left) {
          return vexRest(vrn.value0);
      };
      if (vrn instanceof Data_Either.Right) {
          return vexNote(Tupleted.value)(vrn.value0);
      };
      throw new Error("Failed pattern match at VexTab.Abc.Canonical line 190, column 3 - line 194, column 25: " + [ vrn.constructor.name ]);
  };
  var vexItem = function (vi) {
      if (vi instanceof VexTab_Abc_VexScore.VBar) {
          return vexBar(vi.value0);
      };
      if (vi instanceof VexTab_Abc_VexScore.VNote) {
          return vexNote(Staved.value)(vi.value0);
      };
      if (vi instanceof VexTab_Abc_VexScore.VRest) {
          return vexRest(vi.value0);
      };
      if (vi instanceof VexTab_Abc_VexScore.VTuplet) {
          return " " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(" ")(Data_Functor.map(Data_List_Types.functorList)(vexRestOrNote)(vi.value1)) + (" ^" + (Data_Show.show(Data_Show.showInt)(vi.value0) + ("," + (Data_Show.show(Data_Show.showInt)(Data_List.length(vi.value1)) + "^")))));
      };
      if (vi instanceof VexTab_Abc_VexScore.VChord) {
          var chordDur = Data_Show.show(VexTab_Abc_VexScore.showVexDuration)(vi.value0);
          return " " + (chordDur + (" ( " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(".")(Data_Functor.map(Data_List_Types.functorList)(vexNote(Chordal.value))(vi.value1)) + " )")));
      };
      if (vi instanceof VexTab_Abc_VexScore.VNotePair) {
          return vexNote(Staved.value)(vi.value0) + vexNote(Staved.value)(vi.value1);
      };
      if (vi instanceof VexTab_Abc_VexScore.VIgnore) {
          return "";
      };
      throw new Error("Failed pattern match at VexTab.Abc.Canonical line 102, column 3 - line 139, column 1: " + [ vi.constructor.name ]);
  };
  var vexItems = function (vis) {
      return Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(vexItem)(vis);
  };
  var vexLine = function (vl) {
      return vexStave(vl.stave) + (vexItems(vl.items) + "\x0d\x0a");
  };
  var vexBodyPart = function (bp) {
      if (bp instanceof VexTab_Abc_VexScore.VLine) {
          return vexLine(bp.value0);
      };
      return "";
  };
  var toScoreText = function (score) {
      var f = function (acc) {
          return function (vl) {
              return acc + vexBodyPart(vl);
          };
      };
      return options + Data_Foldable.foldl(Data_List_Types.foldableList)(f)("")(score);
  };
  exports["toScoreText"] = toScoreText;
})(PS["VexTab.Abc.Canonical"] = PS["VexTab.Abc.Canonical"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_Canonical = PS["Data.Abc.Canonical"];
  var Data_Abc_Notation = PS["Data.Abc.Notation"];
  var Data_Abc_Parser = PS["Data.Abc.Parser"];
  var Data_Either = PS["Data.Either"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var VexTab_Abc_VexScore = PS["VexTab.Abc.VexScore"];        
  var noteDur = function (ctx) {
      return function (d) {
          var durn = Data_Int.round(Data_Rational.toNumber(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(ctx.unitNoteLength)(d))(Data_Rational.fromInt(128))));
          if (durn === 128) {
              return new Data_Either.Right(VexTab_Abc_VexScore.Whole.value);
          };
          if (durn === 96) {
              return new Data_Either.Right(VexTab_Abc_VexScore.HalfDotted.value);
          };
          if (durn === 64) {
              return new Data_Either.Right(VexTab_Abc_VexScore.Half.value);
          };
          if (durn === 48) {
              return new Data_Either.Right(VexTab_Abc_VexScore.QuarterDotted.value);
          };
          if (durn === 32) {
              return new Data_Either.Right(VexTab_Abc_VexScore.Quarter.value);
          };
          if (durn === 24) {
              return new Data_Either.Right(VexTab_Abc_VexScore.EighthDotted.value);
          };
          if (durn === 16) {
              return new Data_Either.Right(VexTab_Abc_VexScore.Eighth.value);
          };
          if (durn === 12) {
              return new Data_Either.Right(VexTab_Abc_VexScore.SixteenthDotted.value);
          };
          if (durn === 8) {
              return new Data_Either.Right(VexTab_Abc_VexScore.Sixteenth.value);
          };
          if (durn === 6) {
              return new Data_Either.Right(VexTab_Abc_VexScore.ThirtySecondDotted.value);
          };
          if (durn === 4) {
              return new Data_Either.Right(VexTab_Abc_VexScore.ThirtySecond.value);
          };
          if (durn === 3) {
              return new Data_Either.Right(VexTab_Abc_VexScore.SixtyFourthDotted.value);
          };
          if (durn === 2) {
              return new Data_Either.Right(VexTab_Abc_VexScore.SixtyFourth.value);
          };
          return new Data_Either.Left("too long or too dotted");
      };
  };
  var rest = function (ctx) {
      return function (abcRest) {
          var v = noteDur(ctx)(abcRest.duration);
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right(new Data_Tuple.Tuple({
                  duration: v.value0
              }, ctx));
          };
          if (v instanceof Data_Either.Left) {
              return new Data_Either.Left("Rest " + (v.value0 + (": " + "rest")));
          };
          throw new Error("Failed pattern match at VexTab.Abc.Translate line 222, column 3 - line 227, column 46: " + [ v.constructor.name ]);
      };
  };
  var note = function (ctx) {
      return function (abcNote) {
          var v = noteDur(ctx)(abcNote.duration);
          if (v instanceof Data_Either.Right) {
              var vexNote = {
                  pitchClass: abcNote.pitchClass, 
                  accidental: abcNote.accidental, 
                  octave: abcNote.octave - 1 | 0, 
                  duration: v.value0, 
                  tied: ctx.tied, 
                  decoration: ctx.decoration
              };
              var newCtx = (function () {
                  var $30 = {};
                  for (var $31 in ctx) {
                      if ({}.hasOwnProperty.call(ctx, $31)) {
                          $30[$31] = ctx[$31];
                      };
                  };
                  $30.tied = abcNote.tied;
                  $30.decoration = Data_Maybe.Nothing.value;
                  return $30;
              })();
              return new Data_Either.Right(new Data_Tuple.Tuple(vexNote, newCtx));
          };
          if (v instanceof Data_Either.Left) {
              return new Data_Either.Left("Note " + (v.value0 + (": " + Data_Abc_Canonical.abcNote(abcNote))));
          };
          throw new Error("Failed pattern match at VexTab.Abc.Translate line 231, column 3 - line 257, column 65: " + [ v.constructor.name ]);
      };
  };
  var restOrNote = function (ctx) {
      return function (rn) {
          if (rn instanceof Data_Either.Left) {
              var v = rest(ctx)(rn.value0);
              if (v instanceof Data_Either.Left) {
                  return new Data_Either.Left(v.value0);
              };
              if (v instanceof Data_Either.Right) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(new Data_Either.Left(v.value0.value0), v.value0.value1));
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 266, column 7 - line 268, column 68: " + [ v.constructor.name ]);
          };
          if (rn instanceof Data_Either.Right) {
              var v = note(ctx)(rn.value0);
              if (v instanceof Data_Either.Left) {
                  return new Data_Either.Left(v.value0);
              };
              if (v instanceof Data_Either.Right) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(new Data_Either.Right(v.value0.value0), v.value0.value1));
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 270, column 7 - line 272, column 69: " + [ v.constructor.name ]);
          };
          throw new Error("Failed pattern match at VexTab.Abc.Translate line 264, column 3 - line 272, column 69: " + [ rn.constructor.name ]);
      };
  };
  var normaliseMode = function (ks) {
      if (ks.mode instanceof Data_Abc.Ionian) {
          return ks;
      };
      if (ks.mode instanceof Data_Abc.Major) {
          return ks;
      };
      if (ks.mode instanceof Data_Abc.Minor) {
          return ks;
      };
      return Data_Abc_Notation.normaliseModalKey(ks);
  };
  var makeBroken = function (broken) {
      return function (n1) {
          return function (n2) {
              var up = function (i) {
                  return Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Rational.fromInt(1))(Data_Abc_Notation.dotFactor(i));
              };
              var down = function (i) {
                  return Data_Ring.sub(Data_Ratio.ringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Rational.fromInt(1))(Data_Abc_Notation.dotFactor(i));
              };
              if (broken instanceof Data_Abc.LeftArrow) {
                  var right = (function () {
                      var $50 = {};
                      for (var $51 in n2) {
                          if ({}.hasOwnProperty.call(n2, $51)) {
                              $50[$51] = n2[$51];
                          };
                      };
                      $50.duration = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n2.duration)(up(broken.value0));
                      return $50;
                  })();
                  var left = (function () {
                      var $53 = {};
                      for (var $54 in n1) {
                          if ({}.hasOwnProperty.call(n1, $54)) {
                              $53[$54] = n1[$54];
                          };
                      };
                      $53.duration = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n1.duration)(down(broken.value0));
                      return $53;
                  })();
                  return new Data_Tuple.Tuple(left, right);
              };
              if (broken instanceof Data_Abc.RightArrow) {
                  var right = (function () {
                      var $57 = {};
                      for (var $58 in n2) {
                          if ({}.hasOwnProperty.call(n2, $58)) {
                              $57[$58] = n2[$58];
                          };
                      };
                      $57.duration = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n2.duration)(down(broken.value0));
                      return $57;
                  })();
                  var left = (function () {
                      var $60 = {};
                      for (var $61 in n1) {
                          if ({}.hasOwnProperty.call(n1, $61)) {
                              $60[$61] = n1[$61];
                          };
                      };
                      $60.duration = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n1.duration)(up(broken.value0));
                      return $60;
                  })();
                  return new Data_Tuple.Tuple(left, right);
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 343, column 5 - line 362, column 30: " + [ broken.constructor.name ]);
          };
      };
  };
  var inlineHeader = function (ctx) {
      return function (h) {
          if (h instanceof Data_Abc.Key) {
              return new Data_Either.Left("inline key signature changes not supported");
          };
          if (h instanceof Data_Abc.Meter) {
              return new Data_Either.Left("inline time signature changes not supported");
          };
          if (h instanceof Data_Abc.UnitNoteLength) {
              return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VIgnore.value, (function () {
                  var $67 = {};
                  for (var $68 in ctx) {
                      if ({}.hasOwnProperty.call(ctx, $68)) {
                          $67[$68] = ctx[$68];
                      };
                  };
                  $67.unitNoteLength = h.value0;
                  return $67;
              })()));
          };
          return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VIgnore.value, ctx));
      };
  };
  var initialContext = function (t) {
      var unl = Data_Maybe.fromMaybe(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(8))(Data_Abc_Notation.getUnitNoteLength(t));
      var meter = Data_Abc_Notation.getMeter(t);
      var keySig = Data_Maybe.fromMaybe({
          keySignature: {
              pitchClass: Data_Abc.C.value, 
              accidental: Data_Abc.Natural.value, 
              mode: Data_Abc.Major.value
          }, 
          modifications: Data_List_Types.Nil.value
      })(Data_Abc_Notation.getKeySig(t));
      return {
          modifiedKeySig: keySig, 
          meter: meter, 
          unitNoteLength: unl, 
          tied: false, 
          decoration: Data_Maybe.Nothing.value, 
          continuation: false
      };
  };
  var header = function (ctx) {
      return function (h) {
          if (h instanceof Data_Abc.Key) {
              var $72 = {};
              for (var $73 in ctx) {
                  if ({}.hasOwnProperty.call(ctx, $73)) {
                      $72[$73] = ctx[$73];
                  };
              };
              $72.modifiedKeySig = h.value0;
              return $72;
          };
          if (h instanceof Data_Abc.UnitNoteLength) {
              var $76 = {};
              for (var $77 in ctx) {
                  if ({}.hasOwnProperty.call(ctx, $77)) {
                      $76[$77] = ctx[$77];
                  };
              };
              $76.unitNoteLength = h.value0;
              return $76;
          };
          if (h instanceof Data_Abc.Meter) {
              var $80 = {};
              for (var $81 in ctx) {
                  if ({}.hasOwnProperty.call(ctx, $81)) {
                      $80[$81] = ctx[$81];
                  };
              };
              $80.meter = h.value0;
              return $80;
          };
          return ctx;
      };
  };
  var foldOverResult = function (ctx) {
      return function (aline) {
          return function (fmus) {
              var apnd = function (rvics) {
                  return function (rvic) {
                      var v = new Data_Tuple.Tuple(rvic, rvics);
                      if (v.value0 instanceof Data_Either.Right && v.value1 instanceof Data_Either.Right) {
                          var newvis = new Data_List_Types.Cons(Data_Tuple.fst(v.value0.value0), Data_Tuple.fst(v.value1.value0));
                          return new Data_Either.Right(new Data_Tuple.Tuple(newvis, Data_Tuple.snd(v.value0.value0)));
                      };
                      if (v.value1 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v.value1.value0);
                      };
                      if (v.value0 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v.value0.value0);
                      };
                      throw new Error("Failed pattern match at VexTab.Abc.Translate line 453, column 7 - line 465, column 20: " + [ v.constructor.name ]);
                  };
              };
              var f = function (acc) {
                  return function (mus) {
                      var applicableCtx = (function () {
                          if (acc instanceof Data_Either.Right) {
                              return acc.value0.value1;
                          };
                          return ctx;
                      })();
                      return apnd(acc)(fmus(applicableCtx)(mus));
                  };
              };
              var result = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(new Data_Either.Right(new Data_Tuple.Tuple(Data_List_Types.Nil.value, ctx)))(aline);
              if (result instanceof Data_Either.Right) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(Data_List.reverse(result.value0.value0), result.value0.value1));
              };
              return result;
          };
      };
  };
  var noteList = function (ctx) {
      return function (notes) {
          return foldOverResult(ctx)(notes)(note);
      };
  };
  var restOrNoteList = function (ctx) {
      return function (restOrNotes) {
          return foldOverResult(ctx)(restOrNotes)(restOrNote);
      };
  };
  var firstNoteDuration = function ($195) {
      return Data_Maybe.fromMaybe(Data_Rational.fromInt(1))(Data_List.head(Data_Functor.map(Data_List_Types.functorList)(function (v) {
          return v.duration;
      })($195)));
  };
  var music = function (ctx) {
      return function (m) {
          if (m instanceof Data_Abc.Barline) {
              var newCtx = (function () {
                  if (m.value0.iteration instanceof Data_Maybe.Just && m.value0.iteration.value0 === 1) {
                      var $105 = {};
                      for (var $106 in ctx) {
                          if ({}.hasOwnProperty.call(ctx, $106)) {
                              $105[$106] = ctx[$106];
                          };
                      };
                      $105.decoration = new Data_Maybe.Just("1");
                      return $105;
                  };
                  if (m.value0.iteration instanceof Data_Maybe.Just && m.value0.iteration.value0 === 2) {
                      var $109 = {};
                      for (var $110 in ctx) {
                          if ({}.hasOwnProperty.call(ctx, $110)) {
                              $109[$110] = ctx[$110];
                          };
                      };
                      $109.decoration = new Data_Maybe.Just("2");
                      return $109;
                  };
                  return ctx;
              })();
              return new Data_Either.Right(new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VBar(m.value0), newCtx));
          };
          if (m instanceof Data_Abc.Note) {
              return Data_Functor.map(Data_Either.functorEither)(function (v) {
                  return new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VNote(v.value0), v.value1);
              })(note(ctx)(m.value0));
          };
          if (m instanceof Data_Abc.Rest) {
              return Data_Functor.map(Data_Either.functorEither)(function (v) {
                  return new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VRest(v.value0), v.value1);
              })(rest(ctx)(m.value0));
          };
          if (m instanceof Data_Abc.Tuplet) {
              var notesResult = restOrNoteList(ctx)(m.value1);
              if (notesResult instanceof Data_Either.Right) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VTuplet(m.value0.p, notesResult.value0.value0), ctx));
              };
              if (notesResult instanceof Data_Either.Left) {
                  return new Data_Either.Left(notesResult.value0);
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 145, column 9 - line 150, column 19: " + [ notesResult.constructor.name ]);
          };
          if (m instanceof Data_Abc.Chord) {
              var notesResult = noteList(ctx)(m.value0.notes);
              var nDur = firstNoteDuration(m.value0.notes);
              var overallDur = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(m.value0.duration)(nDur);
              var chordDurResult = noteDur(ctx)(overallDur);
              var v = new Data_Tuple.Tuple(notesResult, chordDurResult);
              if (v.value0 instanceof Data_Either.Right && v.value1 instanceof Data_Either.Right) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VChord(v.value1.value0, v.value0.value0.value0), ctx));
              };
              if (v.value0 instanceof Data_Either.Left) {
                  return new Data_Either.Left(v.value0.value0);
              };
              if (v.value1 instanceof Data_Either.Left) {
                  return new Data_Either.Left("Chord " + (v.value1.value0 + (": " + Data_Abc_Canonical.abcChord(m.value0))));
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 166, column 9 - line 174, column 74: " + [ v.constructor.name ]);
          };
          if (m instanceof Data_Abc.BrokenRhythmPair) {
              var brokenNotes = makeBroken(m.value1)(m.value0)(m.value2);
              var note1Result = note(ctx)(Data_Tuple.fst(brokenNotes));
              var ctx1 = (function () {
                  if (note1Result instanceof Data_Either.Right) {
                      return note1Result.value0.value1;
                  };
                  return ctx;
              })();
              var note2Result = note(ctx1)(Data_Tuple.snd(brokenNotes));
              var v = new Data_Tuple.Tuple(note1Result, note2Result);
              if (v.value0 instanceof Data_Either.Right && v.value1 instanceof Data_Either.Right) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VNotePair(v.value0.value0.value0, v.value1.value0.value0), v.value1.value0.value1));
              };
              if (v.value0 instanceof Data_Either.Left) {
                  return new Data_Either.Left("Note " + (v.value0.value0 + (": " + Data_Abc_Canonical.abcNote(m.value0))));
              };
              if (v.value1 instanceof Data_Either.Left) {
                  return new Data_Either.Left("Note " + (v.value1.value0 + (": " + Data_Abc_Canonical.abcNote(m.value2))));
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 197, column 9 - line 205, column 72: " + [ v.constructor.name ]);
          };
          if (m instanceof Data_Abc.Decoration) {
              return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VIgnore.value, (function () {
                  var $165 = {};
                  for (var $166 in ctx) {
                      if ({}.hasOwnProperty.call(ctx, $166)) {
                          $165[$166] = ctx[$166];
                      };
                  };
                  $165.decoration = new Data_Maybe.Just(m.value0);
                  return $165;
              })()));
          };
          if (m instanceof Data_Abc.Inline) {
              return inlineHeader(ctx)(m.value0);
          };
          if (m instanceof Data_Abc.Continuation) {
              return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VIgnore.value, (function () {
                  var $170 = {};
                  for (var $171 in ctx) {
                      if ({}.hasOwnProperty.call(ctx, $171)) {
                          $170[$171] = ctx[$171];
                      };
                  };
                  $170.continuation = true;
                  return $170;
              })()));
          };
          return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VIgnore.value, ctx));
      };
  };
  var musicLine = function (ctx) {
      return function (ml) {
          return foldOverResult(ctx)(ml)(music);
      };
  };
  var vexLine = function (ctx) {
      return function (line) {
          var staveCtx = (function () {
              var $173 = {};
              for (var $174 in ctx) {
                  if ({}.hasOwnProperty.call(ctx, $174)) {
                      $173[$174] = ctx[$174];
                  };
              };
              $173.meter = Data_Maybe.Nothing.value;
              $173.continuation = false;
              return $173;
          })();
          var mKey = new Data_Maybe.Just(normaliseMode(ctx.modifiedKeySig.keySignature));
          var vexStave = (function () {
              if (ctx.continuation) {
                  return Data_Maybe.Nothing.value;
              };
              return new Data_Maybe.Just({
                  clef: VexTab_Abc_VexScore.Treble.value, 
                  mKey: mKey, 
                  mMeter: ctx.meter
              });
          })();
          var itemsRes = musicLine(staveCtx)(line);
          if (itemsRes instanceof Data_Either.Right) {
              return new Data_Either.Right(new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VLine({
                  stave: vexStave, 
                  items: itemsRes.value0.value0
              }), itemsRes.value0.value1));
          };
          if (itemsRes instanceof Data_Either.Left) {
              return new Data_Either.Left(itemsRes.value0);
          };
          throw new Error("Failed pattern match at VexTab.Abc.Translate line 105, column 5 - line 110, column 15: " + [ itemsRes.constructor.name ]);
      };
  };
  var emptyLine = function (mLine) {
      var f = function (music$prime) {
          if (music$prime instanceof Data_Abc.Spacer) {
              return true;
          };
          if (music$prime instanceof Data_Abc.Ignore) {
              return true;
          };
          if (music$prime instanceof Data_Abc.Continuation) {
              return true;
          };
          return false;
      };
      return Data_Foldable.all(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(mLine);
  };
  var bodyPart = function (ctx) {
      return function (bp) {
          if (bp instanceof Data_Abc.Score) {
              var $185 = emptyLine(bp.value0);
              if ($185) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VEmptyLine.value, ctx));
              };
              return vexLine(ctx)(bp.value0);
          };
          if (bp instanceof Data_Abc.BodyInfo) {
              var newCtx = header(ctx)(bp.value0);
              return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VContextChange.value, newCtx));
          };
          throw new Error("Failed pattern match at VexTab.Abc.Translate line 68, column 3 - line 80, column 45: " + [ bp.constructor.name ]);
      };
  };
  var tuneBody = function (ctx) {
      return function (tb) {
          return foldOverResult(ctx)(tb)(bodyPart);
      };
  };
  var translate = function (t) {
      var ctx = initialContext(t);
      var result = tuneBody(ctx)(t.body);
      var $188 = Data_List["null"](ctx.modifiedKeySig.modifications);
      if ($188) {
          if (result instanceof Data_Either.Right) {
              return new Data_Either.Right(Data_Tuple.fst(result.value0));
          };
          if (result instanceof Data_Either.Left) {
              return new Data_Either.Left(result.value0);
          };
          throw new Error("Failed pattern match at VexTab.Abc.Translate line 42, column 9 - line 47, column 19: " + [ result.constructor.name ]);
      };
      return new Data_Either.Left("modified key signatures not supported");
  };
  exports["translate"] = translate;
})(PS["VexTab.Abc.Translate"] = PS["VexTab.Abc.Translate"] || {});
(function(exports) {
    "use strict";

  var wrapper = function() {

    var vextab = null;
    var artist = null;
    var renderer = null;

    return {

      initialise : function (config) {
        return function () {
          return wrapper.init(config);
        }
      },

      render : function (text) {
        return function () {
          try {
             vextab.reset();
             artist.reset();
             vextab.parse(text);
             artist.render(renderer);
             return true;
          } catch (e) {
             console.log (e.message);
             return false;
          }
        }
      },

      init: function (config) {
        // console.log(config);

        // var VexTab = VexTabDiv;
        var Artist = VexTabDiv.Artist;
        var Renderer = Vex.Flow.Renderer;
        var vexDiv = $(config.canvasDivId)[0];

        Artist.DEBUG = false;
        VexTab.DEBUG = false;

        try {
           // Create VexFlow Renderer from canvas element with id vexDiv
           renderer = new Renderer(vexDiv, Renderer.Backends.CANVAS);

           // Initialize VexTab artist and parser.
           artist = new Artist(config.canvasX, config.canvasY, config.canvasWidth, {scale: config.scale});
           vextab = new VexTab(artist);
           return true;
         } catch (e) {
            console.log (e.message);
            return false;
         }
      }

    }

  }();

  exports.initialise = wrapper.initialise;
  exports.render = wrapper.render;
})(PS["VexTab.Score"] = PS["VexTab.Score"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["VexTab.Score"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["initialise"] = $foreign.initialise;
  exports["render"] = $foreign.render;
})(PS["VexTab.Score"] = PS["VexTab.Score"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var VexTab_Abc_Canonical = PS["VexTab.Abc.Canonical"];
  var VexTab_Abc_Translate = PS["VexTab.Abc.Translate"];
  var VexTab_Score = PS["VexTab.Score"];        
  var renderTune = function (tune) {
      var vexText = VexTab_Abc_Translate.translate(tune);
      if (vexText instanceof Data_Either.Right) {
          return function __do() {
              var v = VexTab_Score.render(VexTab_Abc_Canonical.toScoreText(vexText.value0))();
              return v;
          };
      };
      if (vexText instanceof Data_Either.Left) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(false);
      };
      throw new Error("Failed pattern match at VexTab.Abc.Score line 18, column 5 - line 24, column 19: " + [ vexText.constructor.name ]);
  };
  var renderParsedAbc = function (eitherTune) {
      if (eitherTune instanceof Data_Either.Right) {
          return renderTune(eitherTune.value0);
      };
      if (eitherTune instanceof Data_Either.Left) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(false);
      };
      throw new Error("Failed pattern match at VexTab.Abc.Score line 29, column 3 - line 33, column 12: " + [ eitherTune.constructor.name ]);
  };
  exports["renderParsedAbc"] = renderParsedAbc;
  exports["renderTune"] = renderTune;
})(PS["VexTab.Abc.Score"] = PS["VexTab.Abc.Score"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Data_Abc_Parser = PS["Data.Abc.Parser"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var VexTab_Abc_Score = PS["VexTab.Abc.Score"];
  var VexTab_Score = PS["VexTab.Score"];        
  var sampleAbc = "X:1\x0d\x0a" + ("T:Engelska efter Albert Augustsson\x0d\x0a" + ("N:From the playing of Albert Augustsson, Bohusl\xe4n county.\x0d\x0a" + ("M:2/4\x0d\x0a" + ("R:Engelska\x0d\x0a" + ("S:Orust\x0d\x0a" + ("Z:John Watson 24/01/2015\x0d\x0a" + ("K:A\x0d\x0a" + ("A>c|: e2f2 efed | c2a2 e3d | cedc BdcB | Aced cBAc |\x0d\x0a" + ("e2f2 efed | c2a2 e3d | cedc BdcB | A4 A>AA>B :|\x0d\x0a" + ("|: e2e2 e2de | f2ed B3c | d3c d2cd | e3d cdBc |\x0d\x0a" + "A2a2 a2gf | e2f2 e3d | cedc BdcB |1 A4 A>AA>B :|2 [A4E4] [A4E4] |\x0d\x0a"))))))))));
  var config = {
      canvasDivId: "#vextab", 
      canvasX: 10, 
      canvasY: 10, 
      canvasWidth: 1200, 
      scale: 0.8
  };
  var main = function __do() {
      var v = VexTab_Score.initialise(config)();
      Control_Monad_Eff_Console.log("initialised?")();
      Control_Monad_Eff_Console.logShow(Data_Show.showBoolean)(v)();
      Control_Monad_Eff_Console.log("rendered?")();
      var v1 = VexTab_Abc_Score.renderParsedAbc(Data_Abc_Parser.parse(sampleAbc))();
      return Control_Monad_Eff_Console.logShow(Data_Show.showBoolean)(v1)();
  };
  exports["config"] = config;
  exports["main"] = main;
  exports["sampleAbc"] = sampleAbc;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
